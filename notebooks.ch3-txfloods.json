{"version":2,"kind":"Notebook","sha256":"4eba9285c18260c94e00f6987b18f7103a55ca252fe81c62e616dd4000108c89","slug":"notebooks.ch3-txfloods","location":"/notebooks/ch3_TXfloods.ipynb","dependencies":[],"frontmatter":{"title":"Chapter 3: July 2025 Central TX Floods","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Ty Janoski","given":"Ty","family":"Janoski"},"name":"Ty Janoski","orcid":"0000-0003-4344-355X","affiliations":["City College of New York and NOAA/OAR National Severe Storms Laboratory"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Mya Sears","given":"Mya","family":"Sears"},"name":"Mya Sears","orcid":"0009-0003-5870-7498","affiliations":["NSF National Center for Atmospheric Research"],"id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Bella Condo","given":"Bella","family":"Condo"},"name":"Bella Condo","orcid":"0009-0000-0688-7077","affiliations":["University at Albany (State University of New York)"],"id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"JD Heaton","given":"JD","family":"Heaton"},"name":"JD Heaton","orcid":"0009-0005-7424-4889","affiliations":["Metropolitan State University of Denver"],"id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"MaKenna Collins","given":"MaKenna","family":"Collins"},"name":"MaKenna Collins","orcid":"0009-0003-5566-3370","affiliations":["Jackson State University"],"id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Maxwell Grover","given":"Maxwell","family":"Grover"},"name":"Maxwell Grover","orcid":"0000-0002-0370-8974","affiliations":["Argonne National Laboratory"],"id":"contributors-myst-generated-uid-5"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/mrms-cookbook","copyright":"2025","affiliations":[{"id":"City College of New York and NOAA/OAR National Severe Storms Laboratory","name":"City College of New York and NOAA/OAR National Severe Storms Laboratory"},{"id":"NSF National Center for Atmospheric Research","name":"NSF National Center for Atmospheric Research"},{"id":"University at Albany (State University of New York)","name":"University at Albany (State University of New York)"},{"id":"Metropolitan State University of Denver","name":"Metropolitan State University of Denver"},{"id":"Jackson State University","name":"Jackson State University"},{"id":"Argonne National Laboratory","name":"Argonne National Laboratory"},{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"source_url":"https://github.com/projectpythia/mrms-cookbook/blob/main/notebooks/ch3_TXfloods.ipynb","edit_url":"https://github.com/projectpythia/mrms-cookbook/edit/main/notebooks/ch3_TXfloods.ipynb","exports":[{"format":"ipynb","filename":"ch3_TXfloods.ipynb","url":"/mrms-cookbook/build/ch3_TXfloods-0753c597340712d8ca4fe341088e5179.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vnTIWI6IdW"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"vSQu6Z0gkP"},{"type":"heading","depth":4,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook walks through how to access, visualize, and animate low-level composite reflectivity data from the Multi-Radar/Multi-Sensor (MRMS) system.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"b5q3VkXvDj"}],"identifier":"this-notebook-walks-through-how-to-access-visualize-and-animate-low-level-composite-reflectivity-data-from-the-multi-radar-multi-sensor-mrms-system","label":"This notebook walks through how to access, visualize, and animate low-level composite reflectivity data from the Multi-Radar/Multi-Sensor (MRMS) system.","html_id":"this-notebook-walks-through-how-to-access-visualize-and-animate-low-level-composite-reflectivity-data-from-the-multi-radar-multi-sensor-mrms-system","implicit":true,"key":"NRMyMgoAR8"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The case study focuses on the Central Texas flood event in July 2025, using reflectivity data hosted on AWS. The main steps include:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"q3lbh5Ek2k"}],"key":"MrZtQPruns"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Selecting and downloading MRMS data for specific timestamps","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jAoCZt5wqf"}],"key":"hjnOFla3QJ"}],"key":"TsrIscUWL2"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Creating a static reflectivity map","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"VIVzHX3lSu"}],"key":"IevbgMPst3"}],"key":"V2v9GkQ5Lk"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Building an animation to show reflectivity changes over time","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"wEGGap14rD"}],"key":"OXCRhRQuFf"}],"key":"Q1oOCr6K6G"}],"key":"OyAtyckjcx"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"This notebook is intended for students, forecasters, or researchers looking to explore radar visualization techniques or build familiarity with remote sensing workflows using Python.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"nidym0neqi"}],"key":"P3E75bveOQ"}],"key":"uzAn0DOKoA"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What is MRMS?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kjsXFFDcWr"}],"identifier":"what-is-mrms","label":"What is MRMS?","html_id":"what-is-mrms","implicit":true,"key":"mDhwvxmekc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The Multi-Radar/Multi-Sensor (MRMS) system is a set of real-time analysis products developed by NOAAâ€™s National Severe Storms Laboratory (NSSL). It brings together data from:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qK6tzZpher"}],"key":"o7o3gQIE4N"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Dozens of NEXRAD radars","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"bMMeER2gpK"}],"key":"WWSehqiBW2"}],"key":"MlrTJrLdP3"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Surface observations","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uy571t2Qjw"}],"key":"lIVhnpqA3w"}],"key":"LNpLZ9bmuC"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Satellites","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"aTuu0lmlLU"}],"key":"zEZEizQMR7"}],"key":"NOgiTTdSJe"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Lightning detection networks","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"PrRxubnylV"}],"key":"BmfzNJ1b8B"}],"key":"lI3AdBgYKN"}],"key":"sAHH4gflMJ"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"to create high-resolution snapshots of precipitation, severe weather, and related hazards.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"hnhBugaHhf"}],"key":"P88MdVmBRw"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"MRMS updates every 2.5 minutes and is commonly used in operational forecasting, hydrology, aviation, and research.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"U73o27zkyc"}],"key":"KNjypQP81B"},{"type":"thematicBreak","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"HPKSelVF3v"},{"type":"heading","depth":3,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Goal of This Notebook","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"D4i1IMHjqQ"}],"identifier":"goal-of-this-notebook","label":"Goal of This Notebook","html_id":"goal-of-this-notebook","implicit":true,"key":"AdeCHIfkTd"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"The goal of this notebook is to walk through a simple, practical workflow for visualizing radar reflectivity data using Python. Specifically, weâ€™ll:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"ewDc9dEreB"}],"key":"XzhVRo95Pu"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":19,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Access MRMS Layer Composite Reflectivity Low data from AWS Open Data","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"PbPue5n20d"}],"key":"ykWKGr2aOz"}],"key":"Jfa3c9Gr8H"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Plot a single reflectivity frame as a static map","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"MT62Z6NeLd"}],"key":"oAm5NkC2PJ"}],"key":"u3E60Uxcxm"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Animate a 6-frame sequence from July 4, 2025, during the Central Texas flood event","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"dvRmYNzmuv"}],"key":"tXkrpsPwN5"}],"key":"FFZHiDatCN"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Demonstrate how to work with gridded radar data using open-source tools like MetPy, Cartopy, and xarray","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"pWPbHQuzd0"}],"key":"Ste1gJN9iJ"}],"key":"EtUREmfYek"}],"key":"KjD37oXizu"}],"key":"aixaSzzjCi"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"se22lr7fqx"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"sUlumCKcj4"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"below are the python packages that are used for this code","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"oFHjOmntpv"}],"key":"ir4P76zg3v"}],"key":"kFxCr16JIZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Core packages\nimport gzip\nimport tempfile\n\n# File handling (if you're downloading MRMS .grib2.gz files manually)\nimport urllib.request\nfrom datetime import datetime, timedelta\nfrom io import StringIO\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport cmweather  # noqa: F401\nimport matplotlib.colors as mcolors\n\n# Plotting\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport numpy.ma as ma\nimport pandas as pd\nimport requests\nimport s3fs\nimport xarray as xr\nfrom IPython.display import HTML  # To display the animation\n\n# Animation\nfrom matplotlib.animation import ArtistAnimation, PillowWriter\nfrom metpy.plots import ctables  # For NWS reflectivity colormap\nfrom scipy.interpolate import RegularGridInterpolator\n\n","key":"AJ3Ov4qBEE"},{"type":"output","id":"mZWKPsASUtL47GZaBnZUw","data":[],"key":"jtdkUe3UJI"}],"key":"ymTda93amN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define Timestamps and Colormap","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"r4nMPC0ba4"}],"identifier":"define-timestamps-and-colormap","label":"Define Timestamps and Colormap","html_id":"define-timestamps-and-colormap","implicit":true,"key":"hJhR6M2nVY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To build the animation, weâ€™ll use 6 hourly frames of MRMS data from the morning of July 4, 2025. Each timestamp matches a GRIB2 file available from the AWS MRMS archive.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Qeq4uZmPKw"}],"key":"R371NwwXuc"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We also define the standard NWS reflectivity colormap using MetPy, which gives us consistent color breaks every 5 dBZ which is a common setup for radar reflectivity plots.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"rME2nYiRR6"}],"key":"MMyLp1dKKA"}],"key":"PfmsHbb54Y"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Access and Load MRMS Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"D7vpHBz5wC"}],"identifier":"access-and-load-mrms-data","label":"Access and Load MRMS Data","html_id":"access-and-load-mrms-data","implicit":true,"key":"PbrwaCUZec"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"MRMS data is stored as .grib2.gz files on the AWS S3 public data bucket. Each file represents a single timestamp and product type.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rvC3K2SMnu"}],"key":"F5EbBwt5Z6"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"In this step:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"c43AmkazPo"}],"key":"QXn5PGD2HN"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"We use urllib.request.urlopen() to ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Q3iIYh0Axe"},{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"download the compressed file","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"aroGEVC1fA"}],"key":"RgLgBCyU1V"},{"type":"text","value":" directly from AWS","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"tf8FRWTw3g"}],"key":"hLcUiuXvZj"}],"key":"C21PNUypmY"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"We ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"tjtVTAogoa"},{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"decompress","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"nVeYpZKhP0"}],"key":"Ou6NAkP5wu"},{"type":"text","value":" it using Pythonâ€™s built-in gzip module","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"DNPuaFBlna"}],"key":"BPhX7D2kpZ"}],"key":"Iv2VD2YYrm"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Then we load the GRIB2 file into an xarray.DataArray using the cfgrib engine","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"cbEofCWuoL"}],"key":"EeTPHzli99"}],"key":"fa8DVoC9am"}],"key":"harF6sRJF2"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"This approach lets us work with the data directly in Python without having to manually download or unzip anything ahead of time.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"DYeMdBSD3y"}],"key":"FlWO7xZPFl"}],"key":"e3WpWp7aS0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Define the URL to the compressed MRMS GRIB2 file for a specific timestamp\nurl = \"https://noaa-mrms-pds.s3.amazonaws.com/CONUS/LayerCompositeReflectivity_Low_00.50/20250704/MRMS_LayerCompositeReflectivity_Low_00.50_20250704-001040.grib2.gz\"\n\n# Download the file as bytes\nresponse = urllib.request.urlopen(url)\ncompressed_file = response.read()\n\n# Decompress and load into xarray using a temporary file\nwith tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n    # Decompress the .gz content and write to temp file\n    f.write(gzip.decompress(compressed_file))\n\n    # Load GRIB2 data as an xarray DataArray\n    data_in = xr.load_dataarray(f.name, engine='cfgrib', decode_timedelta=True)","key":"GXORYpXeeq"},{"type":"output","id":"_KNiCZRzF10azufGwToqK","data":[{"output_type":"stream","name":"stderr","text":"ECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\nECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\n"}],"key":"td3ji0FA4y"}],"key":"kpy2iiISFv"},{"type":"block","kind":"notebook-content","children":[],"key":"w8tP5HGrpY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Set Up Reflectivity Colormap and Extract Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VuFraA0Wey"}],"identifier":"set-up-reflectivity-colormap-and-extract-data","label":"Set Up Reflectivity Colormap and Extract Data","html_id":"set-up-reflectivity-colormap-and-extract-data","implicit":true,"key":"HsORdtrVVJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This section gets the MRMS reflectivity data ready for plotting and builds a map to visualize it.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vEfbHwHdrH"}],"key":"yduJw5NiMz"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Colormap and Normalization:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zNE6gxYg1I"}],"key":"LuO2J5gkUc"},{"type":"break","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"reWxgpvAyC"},{"type":"text","value":"We use MetPyâ€™s built-in NWSReflectivity colormap, which is designed for radar data in dBZ. The get_with_steps() function sets up color breaks every 5 dBZ â€” a common setup in operational radar displays.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Hfogxwtaxw"}],"key":"lOpsgcOelk"}],"key":"nvNlPXFUAy"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Extract Coordinates and Data:","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Twfu0qOc9q"}],"key":"vVVavbrbTb"},{"type":"break","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ysjKxnRE4j"},{"type":"text","value":"We pull out the longitude, latitude, and reflectivity values from the data array. If the coordinates are in 1D (which happens in some MRMS products), we convert them to 2D using np.meshgrid() so they work with the plotting function.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"fj2i4IVRi6"}],"key":"wNAJh64a7T"}],"key":"p0Hgjzcnhz"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Mask Low Reflectivity Values:","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"EmgRc209Je"}],"key":"EHUYx2l352"},{"type":"break","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"CVVHdBJhkQ"},{"type":"text","value":"Reflectivity values below 5 dBZ are masked out with ma.masked_where() to remove light noise and clutter from the map.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"BXtB1Grz2B"}],"key":"joN9QGKKWs"}],"key":"RjNQVHKniA"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Set Up the Map:","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ffLKJb1tHc"}],"key":"T1bOuhfHAh"},{"type":"break","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"iXcon0G8h0"},{"type":"text","value":"We create a static figure using matplotlib and Cartopy, with a PlateCarree projection centered over Texas. The domain is narrowed with set_extent() to focus on the region of interest.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"NzrpUTiXAu"}],"key":"D7q5ysJgJP"}],"key":"ryhJnvVALy"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Add Map Features:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"ES2EWOk9gl"}],"key":"ZCLsSnFXod"},{"type":"break","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"QhLp5zvgDy"},{"type":"text","value":"Coastlines, country borders, and U.S. state lines are added to give the plot geographic context.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"v6BFv98gyT"}],"key":"TGq6kpxXxB"}],"key":"SvdZwzNxEh"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"strong","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Plot the Reflectivity:","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"iKN36diH1E"}],"key":"aZcsYnZ8t8"},{"type":"break","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"UF4yjxPrCu"},{"type":"text","value":"The reflectivity field is plotted using pcolormesh() with our defined colormap and normalization. A horizontal colorbar is added to show the dBZ scale.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"DzUflkodqW"}],"key":"HJM485Ignk"}],"key":"JInGKHFORd"},{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":23,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"strong","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Final Touches:","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"lLLjkxbgck"}],"key":"CqXJocWInk"},{"type":"break","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"BABxZNEfQg"},{"type":"text","value":"We include a plot title and display the final figure with ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"vuRbWve7x9"},{"type":"link","url":"http://plt.show","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"plt.show","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"HGIbfucYwU"}],"urlSource":"http://plt.show","key":"NtNge9IzeO"},{"type":"text","value":"().","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"YpLU8Vjqij"}],"key":"sUo4la39EG"}],"key":"OvWnVz5XPz"}],"key":"g26CCFKRg9"}],"key":"W5wccRr52X"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"refl_norm, refl_cmap = ctables.registry.get_with_steps('NWSReflectivity', 5, 5)\n\n# 2. Extract coords & data\nlons = data_in.longitude.values\nlats = data_in.latitude.values\nrefl = data_in.values\n\n# If coords are 1D, make them 2D\nif lons.ndim == 1 and lats.ndim == 1:\n    lons, lats = np.meshgrid(lons, lats)","key":"lSwModEXGO"},{"type":"output","id":"NOwfZASEnj6uxcshY0q8U","data":[],"key":"b4cVCMggNg"}],"key":"miRTYkPF2m"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# 3. Plot\nfig = plt.figure(figsize=(10, 8))\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_extent([-106, -93, 25, 36], crs=ccrs.PlateCarree())\n\nax.add_feature(cfeature.COASTLINE, linewidth=1)\nax.add_feature(cfeature.BORDERS, linewidth=1)\nax.add_feature(cfeature.STATES, linewidth=0.5)\n\nmesh = ax.pcolormesh(\n    lons, lats, ma.masked_where(refl<5,refl),\n    cmap=refl_cmap,\n    norm=refl_norm,\n    transform=ccrs.PlateCarree()\n)\n\ncb = plt.colorbar(mesh, ax=ax, orientation='horizontal', pad=0.05, aspect=50)\ncb.set_label('Reflectivity (dBZ)')\n\nplt.title('MRMS Layer Composite Reflectivity â€“ Texas', fontsize=14)\nplt.show()\n","key":"DM2qpcsTkt"},{"type":"output","id":"9aLPMXJoxCfkxO56vBqiU","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/mrms-cookbook-dev/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/10m_physical/ne_10m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/mrms-cookbook-dev/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/10m_cultural/ne_10m_admin_0_boundary_lines_land.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/mrms-cookbook-dev/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/10m_cultural/ne_10m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1000x800 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"ec3edb8e9831c95178d3a6d4ec23346e","path":"/mrms-cookbook/build/ec3edb8e9831c95178d3a6d4ec23346e.png"}}}],"key":"sLiG26XvrQ"}],"key":"EiFWqSPW0Q"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Select Timestamps and Animate Reflectivity","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Kbsc3b0TUx"}],"identifier":"select-timestamps-and-animate-reflectivity","label":"Select Timestamps and Animate Reflectivity","html_id":"select-timestamps-and-animate-reflectivity","implicit":true,"key":"dx9y1qIAjB"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This part of the notebook automates the process of pulling in multiple MRMS reflectivity files and creating an animation to show how low-level reflectivity changed over time.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RHN5Sxzpzu"}],"key":"Jzxk2CXtJY"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Check for Available Timestamps:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"izd7CmafWa"}],"key":"ZhwvLVa9KV"},{"type":"break","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"SpxEk7Yf7D"},{"type":"text","value":"We define a time range from July 4 to July 7, 2025, and loop through it in 30-minute steps. For each time, we generate a file path from the AWS-hosted MRMS archive and try downloading it. If the file exists, we save that timestamp. For this demo, we stop after grabbing six valid files.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"s61S2awG3A"}],"key":"WrPfi4Nr5c"}],"key":"aqXvkBfbE9"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Set Up the Map and Colormap:","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"lB4dgyHCCp"}],"key":"ziV7udbBks"},{"type":"break","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"O7obXD8fPA"},{"type":"text","value":"After collecting the timestamps, we build a static map using Cartopy (Plate Carree projection), focused on Texas and surrounding areas. We also apply the MetPy NWSReflectivity colormap and mask out any reflectivity values below 5 dBZ to clean up the visualization.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"XMFn6xBGKY"}],"key":"GxJTvZzVkm"}],"key":"IdG023bRBX"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Download and Plot Each Frame:","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Kybs3pgEUN"}],"key":"EKWQsQCK6Y"},{"type":"break","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"sWQEaA1RXa"},{"type":"text","value":"For each timestamp:","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"b0TmyDUHin"}],"key":"TqYNK8lR7y"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":13,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"The corresponding .grib2.gz file is downloaded and decompressed.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"meMTmQtlW2"}],"key":"u23GhZDHt8"}],"key":"yroReqFfhV"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"We extract the reflectivity data and coordinates using xarray.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"tFad9zMWWA"}],"key":"CCOUj1Xjwe"}],"key":"E45STMRWNS"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"If the coordinate arrays are 1D, we convert them to 2D for plotting.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"v4KsXeVNID"}],"key":"CzeIxjB8wr"}],"key":"Xu7mRUPf7r"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"The reflectivity data is plotted with pcolormesh(), and we add a dynamic title showing the UTC time.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"nB7nR164tL"}],"key":"dYuJIxciO6"}],"key":"iBDPCUMTD0"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Each frame (plot + title) is saved for the animation.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"fbLEjpUfDJ"}],"key":"d13kZaKjV9"}],"key":"Rk9BBwhkeV"}],"key":"eFbPRk7UCU"}],"key":"GiHmepIDPW"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"strong","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Build the Animation:","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"KuVK7IjTSZ"}],"key":"y49M6hzpQ4"},{"type":"break","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"xOdgSYtCre"},{"type":"text","value":"We use ArtistAnimation from Matplotlib to stitch the frames together into an animation. plt.close(fig) is used beforehand to prevent Jupyter from displaying a static image under the animation.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"BbMz9ci40X"}],"key":"NaqI0MDcyN"}],"key":"ENqLulVRVe"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"strong","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Export as a GIF:","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"xaNy3xlFwo"}],"key":"gaZuB6preH"},{"type":"break","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"ZFT1OTtdp9"},{"type":"text","value":"The finished animation is saved as a .gif using Pillow so it can be easily shared or embedded in a presentation.","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"btb1HDaDKd"}],"key":"xdBgAK3YEI"}],"key":"SYsBa2vzXi"}],"key":"n3hUPJEbnB"},{"type":"paragraph","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"The result is a short radar loop showing how reflectivity evolved during the early hours of July 4, 2025, which is a period tied to widespread heavy rain and flash flooding across Central Texas.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"JL560HQvRK"}],"key":"m0drqDvAyJ"}],"key":"P4nsXhY7Ke"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = datetime(2025, 7, 4, 0, 10, 40)\nend = datetime(2025, 7, 7, 0, 0, 0)\nstep = timedelta(minutes=30)\n\nvalid_timestamps = []\nt = start\n\nprint(\"Checking for available MRMS files...\\n\")\n\nwhile t <= end and len(valid_timestamps) < 6:\n    ts = t.strftime(\"%Y%m%d-%H%M%S\")\n    date_str = ts[:8]\n    url = (\n        f\"https://noaa-mrms-pds.s3.amazonaws.com/CONUS/LayerCompositeReflectivity_Low_00.50/\"\n        f\"{date_str}/MRMS_LayerCompositeReflectivity_Low_00.50_{ts}.grib2.gz\"\n    )\n    try:\n        resp = urllib.request.urlopen(url, timeout=5)\n        print(f\" Found: {ts}\")\n        valid_timestamps.append(ts)\n    except:\n        print(f\" Missing: {ts}\")\n    t += step\n\nprint(\"\\n Selected 6 timestamps:\")\nfor ts in valid_timestamps:\n    print(ts)\n","key":"me2ZIhFTYy"},{"type":"output","id":"VLLn-swem1NOy7RZHRw2z","data":[{"output_type":"stream","name":"stdout","text":"Checking for available MRMS files...\n\n"},{"output_type":"stream","name":"stdout","text":" Found: 20250704-001040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-004040\n"},{"output_type":"stream","name":"stdout","text":" Found: 20250704-011040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-014040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-021040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-024040\n"},{"output_type":"stream","name":"stdout","text":" Found: 20250704-031040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-034040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-041040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-044040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-051040\n"},{"output_type":"stream","name":"stdout","text":" Found: 20250704-054040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-061040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-064040\n"},{"output_type":"stream","name":"stdout","text":" Found: 20250704-071040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-074040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-081040\n"},{"output_type":"stream","name":"stdout","text":" Missing: 20250704-084040\n"},{"output_type":"stream","name":"stdout","text":" Found: 20250704-091040\n\n Selected 6 timestamps:\n20250704-001040\n20250704-011040\n20250704-031040\n20250704-054040\n20250704-071040\n20250704-091040\n"}],"key":"vFPrBbSrVs"}],"key":"OZPUfoFM0u"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Define the 6 known working timestamps (one every hour)\ntimestamps = [\n    \"20250704-001040\",\n    \"20250704-011040\",\n    \"20250704-031040\",\n    \"20250704-054040\",\n    \"20250704-071040\",\n    \"20250704-091040\"\n]\n\n# Set up colormap and normalization for reflectivity\nrefl_norm, refl_cmap = ctables.registry.get_with_steps('NWSReflectivity', 5, 5)\n\n# Initialize animation container\nframes_six = []\n\n# Set up static map\nfig = plt.figure(figsize=(10, 8))\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_extent([-106, -93, 25, 36], crs=ccrs.PlateCarree())\nax.add_feature(cfeature.COASTLINE, linewidth=1)\nax.add_feature(cfeature.BORDERS, linewidth=1)\nax.add_feature(cfeature.STATES, linewidth=0.5)\n\n# Loop through timestamps and collect frames\nfor ts in timestamps:\n    print(f\"Loading {ts}...\")\n    try:\n        url = (\n            f\"https://noaa-mrms-pds.s3.amazonaws.com/CONUS/LayerCompositeReflectivity_Low_00.50/\"\n            f\"{ts[:8]}/MRMS_LayerCompositeReflectivity_Low_00.50_{ts}.grib2.gz\"\n        )\n        response = urllib.request.urlopen(url)\n        compressed_file = response.read()\n\n        with tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n            f.write(gzip.decompress(compressed_file))\n            f.flush()\n            data_in = xr.load_dataarray(f.name, engine='cfgrib', decode_timedelta=True)\n\n        # Extract coordinates and reflectivity data\n        lons = data_in.longitude.values\n        lats = data_in.latitude.values\n        refl = data_in.values\n\n        if lons.ndim == 1 and lats.ndim == 1:\n            lons, lats = np.meshgrid(lons, lats)\n\n        # Plot single frame (no show)\n        mesh = ax.pcolormesh(\n            lons, lats, ma.masked_where(refl < 5, refl),\n            cmap=refl_cmap,\n            norm=refl_norm,\n            transform=ccrs.PlateCarree()\n        )\n\n        # Create a title text that updates with each frame\n        timestamp_label = f\"{ts[:4]}-{ts[4:6]}-{ts[6:8]} {ts[9:11]}:{ts[11:13]} UTC\"\n        title = ax.text(\n            0.5, 1.02,\n            f\"MRMS Low-Level Reflectivity (dBZ) â€“ {timestamp_label}\",\n            transform=ax.transAxes,\n            ha=\"center\", va=\"bottom\", fontsize=14\n        )\n\n        # Save both mesh and title to animation frame\n        frames_six.append([mesh, title])\n\n    except Exception as e:\n        print(f\"Skipped {ts} â†’ {e}\")\n        continue\n\n# Create and display an animation\nplt.close(fig)\nanim = ArtistAnimation(fig, frames_six, interval=500, blit=True)\nHTML(anim.to_jshtml())","key":"q8hsv3R8hS"},{"type":"output","id":"gACYcjdWXCWjMu2yJ8i_w","data":[{"output_type":"stream","name":"stdout","text":"Loading 20250704-001040...\n"},{"output_type":"stream","name":"stderr","text":"ECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\nECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\n"},{"output_type":"stream","name":"stdout","text":"Loading 20250704-011040...\n"},{"output_type":"stream","name":"stderr","text":"ECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\nECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\n"},{"output_type":"stream","name":"stdout","text":"Loading 20250704-031040...\n"},{"output_type":"stream","name":"stderr","text":"ECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\nECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\n"},{"output_type":"stream","name":"stdout","text":"Loading 20250704-054040...\n"},{"output_type":"stream","name":"stderr","text":"ECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\nECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\n"},{"output_type":"stream","name":"stdout","text":"Loading 20250704-071040...\n"},{"output_type":"stream","name":"stderr","text":"ECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\nECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\n"},{"output_type":"stream","name":"stdout","text":"Loading 20250704-091040...\n"},{"output_type":"stream","name":"stderr","text":"ECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\nECCODES ERROR   :  Key dataTime (unpack_long): Truncating time: non-zero seconds(40) ignored\n"},{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"3b239ca73386791ff11137c3db74fd8f","path":"/mrms-cookbook/build/3b239ca73386791ff11137c3db74fd8f.html"}}}],"key":"mhUby7fjyw"}],"key":"xnOsBxXLBb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Save animation as a .gif\nanim.save(\"mrms_reflectivity_animation.gif\", writer=PillowWriter(fps=2))\n\nprint(\"Animation saved as 'mrms_reflectivity_animation.gif'\")\n","key":"NJpmDWivzY"},{"type":"output","id":"eq1NX5vS6fbR6c3uZUDuZ","data":[{"output_type":"stream","name":"stdout","text":"Animation saved as 'mrms_reflectivity_animation.gif'\n"}],"key":"QJ6Hm1dj33"}],"key":"hMZmutGW6S"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Reflectivity Animation: Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZyFEoWMLpT"}],"identifier":"reflectivity-animation-summary","label":"Reflectivity Animation: Summary","html_id":"reflectivity-animation-summary","implicit":true,"key":"EsZFhCBBbu"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We demonstrated how to access and animate low-level composite reflectivity data from the MRMS system using open-source Python tools. We focused on a short sequence from the July 4, 2025, Central Texas flood event to highlight how reflectivity features evolved.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vCnVDeMT1m"}],"key":"QOTGZKkrwO"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This workflow is a flexible starting point for working with radar data, especially for case studies or quick visual diagnostics. The next section will continue building on this analysis with more approaches to explore the MRMS dataset!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"bLR0DUZBQO"}],"key":"Cc3TMTWHBr"}],"key":"HKm8FlsIEz"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Comparison with ASOS Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fr8rGTvrLb"}],"identifier":"comparison-with-asos-data","label":"Comparison with ASOS Data","html_id":"comparison-with-asos-data","implicit":true,"key":"qjhb0LdsBJ"}],"key":"hhYLMJ6rLA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\naws = s3fs.S3FileSystem(anon=True)\npath = aws.ls(\"noaa-mrms-pds/CONUS/RadarOnly_QPE_24H_00.00/20250705/\")[0]\n\nresponse = urllib.request.urlopen(\"https://noaa-mrms-pds.s3.amazonaws.com/\" + path[14:])\ncompressed_file = response.read()\n\nwith tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n            f.write(gzip.decompress(compressed_file))\n            f.flush()\n            data = xr.load_dataarray(f.name, engine='cfgrib', decode_timedelta=True)\n\n# Set lat and lon bounds\nlat_min, lat_max = 28, 33\nlon_min, lon_max = -102.5, -96.5\n\n# Subset data and delete original\nsubset = data.sel(\n    latitude=slice(lat_max, lat_min),\n    longitude=slice(360 - abs(lon_min), 360 - abs(lon_max)),\n).copy(deep=True)\n\n# Remove original data to free memory\ndel data\n\nurl = \"https://mesonet.agron.iastate.edu/cgi-bin/request/asos.py\"\n\nparams = {\n    \"network\": \"TX_ASOS\",  # Or just use \"ASOS\" for all U.S.\n    \"data\": \"p01i\",\n    \"year1\": \"2025\",\n    \"month1\": \"7\",\n    \"day1\": \"4\",\n    \"year2\": \"2025\",\n    \"month2\": \"7\",\n    \"day2\": \"4\",\n    \"format\": \"comma\",\n    \"latlon\": \"yes\",\n}\n\n# Make the request\nresponse = requests.get(url, params=params)\n\n# Parse CSV from response text\ndf = pd.read_csv(StringIO(response.text), skiprows=5)\n\n# Drop missing precip values\ndf = df[df[\"p01i\"] != \"M\"]\ndf[\"p01i\"] = df[\"p01i\"].astype(float)\n\n# Convert timestamp to datetime\ndf[\"valid\"] = pd.to_datetime(df[\"valid\"])\n\n# Group by station and sum hourly precip\ndaily_precip = (\n    df.groupby([\"station\", \"lon\", \"lat\"])[\"p01i\"]\n    .sum()\n    .reset_index()\n    .rename(columns={\"p01i\": \"precip_in\"})\n)\n\ndaily_precip","key":"FugDoJFXX9"},{"type":"output","id":"h5x_uSnsj8RnjAkznVbzu","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"    station       lon      lat  precip_in\n0       0F2  -97.7756  33.6017     0.1200\n1       11R  -96.3742  30.2189     0.0200\n2       18H  -92.0333  26.1283     0.0000\n3       2R9  -97.8656  28.8250     0.0000\n4       3T5  -96.9500  29.9100     0.0002\n..      ...       ...      ...        ...\n196     UVA  -99.7436  29.2113     0.0500\n197     VAF  -94.6253  27.3536     0.0000\n198     VCT  -96.9303  28.8614     0.0000\n199     VHN -104.7838  31.0578     0.0000\n200     XBP  -97.8284  33.1753     0.0200\n\n[201 rows x 4 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>station</th>\n      <th>lon</th>\n      <th>lat</th>\n      <th>precip_in</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0F2</td>\n      <td>-97.7756</td>\n      <td>33.6017</td>\n      <td>0.1200</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11R</td>\n      <td>-96.3742</td>\n      <td>30.2189</td>\n      <td>0.0200</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18H</td>\n      <td>-92.0333</td>\n      <td>26.1283</td>\n      <td>0.0000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2R9</td>\n      <td>-97.8656</td>\n      <td>28.8250</td>\n      <td>0.0000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3T5</td>\n      <td>-96.9500</td>\n      <td>29.9100</td>\n      <td>0.0002</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>196</th>\n      <td>UVA</td>\n      <td>-99.7436</td>\n      <td>29.2113</td>\n      <td>0.0500</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>VAF</td>\n      <td>-94.6253</td>\n      <td>27.3536</td>\n      <td>0.0000</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>VCT</td>\n      <td>-96.9303</td>\n      <td>28.8614</td>\n      <td>0.0000</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>VHN</td>\n      <td>-104.7838</td>\n      <td>31.0578</td>\n      <td>0.0000</td>\n    </tr>\n    <tr>\n      <th>200</th>\n      <td>XBP</td>\n      <td>-97.8284</td>\n      <td>33.1753</td>\n      <td>0.0200</td>\n    </tr>\n  </tbody>\n</table>\n<p>201 rows Ã— 4 columns</p>\n</div>","content_type":"text/html"}}}],"key":"OxFdhhqLBx"}],"key":"BzaGdnFwQb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set levels\nlevels = [\n    0,\n    0.01,\n    0.1,\n    0.25,\n    0.50,\n    1,\n    1.5,\n    2,\n    2.5,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    12,\n    14,\n    16,\n    18,\n]\n\n# Create a normalization object\ncmap = plt.get_cmap(\"ChaseSpectral\")  # Use full-resolution colormap\nnorm = mcolors.BoundaryNorm(levels, ncolors=cmap.N, clip=False)\n\nfig = plt.figure(figsize=(10, 8))\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n\nax.add_feature(cfeature.COASTLINE, linewidth=1, edgecolor=\"white\")\nax.add_feature(cfeature.BORDERS, linewidth=1, edgecolor=\"white\")\nax.add_feature(cfeature.STATES, linewidth=0.5, edgecolor=\"white\")\n# Add counties\nax.add_feature(\n    cfeature.NaturalEarthFeature(\n        category=\"cultural\",\n        name=\"admin_2_counties\",\n        scale=\"10m\",\n        facecolor=\"none\",\n        edgecolor=\"white\",\n        linewidth=0.3,\n    )\n)\n\nmesh = ax.pcolormesh(\n    subset.longitude,\n    subset.latitude,\n    subset / 25.4,  # Convert mm to inches\n    norm=norm,\n    cmap=\"ChaseSpectral\",\n    transform=ccrs.PlateCarree(),\n)\n\n# Overlay ASOS bubble plot\nsc = ax.scatter(\n    daily_precip[\"lon\"],\n    daily_precip[\"lat\"],\n    s=daily_precip[\"precip_in\"] * 40,  # adjust bubble size scaling\n    c=daily_precip[\"precip_in\"],\n    cmap=cmap,\n    norm=norm,\n    alpha=0.9,\n    edgecolor=\"black\",\n    linewidth=0.4,\n    transform=ccrs.PlateCarree(),\n    zorder=10\n)\n\nfor size in [0.1, 0.5, 1.0, 2.0, 4.0]:\n    ax.scatter([], [], s=size * 40, c='gray', alpha=0.6, edgecolor='black', label=f\"{size:.1f}\\\"\")\n\nax.legend(scatterpoints=1, loc=\"lower right\", title=\"ASOS Daily Rain\", frameon=True)\n\n\ncb = plt.colorbar(\n    mesh, ax=ax, orientation=\"horizontal\", pad=0.05, aspect=50, shrink=0.8\n)\ncb.set_label(\"Rainfall (in)\")\n# Add tick labels to colorbar\ncb.set_ticks(levels)\ncb.set_ticklabels([f\"{level:.2f}\" for level in levels])\ncb.ax.tick_params(labelsize=10, rotation=45)\n\nplt.title(\"MRMS 24-Hour Radar Only QPE vs. ASOS Stations (July 4, 2025)\", fontsize=16)\nplt.tight_layout()","key":"wxnd9VMGen"},{"type":"output","id":"tSQgOd8bW0EVo3Wa66qzH","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/mrms-cookbook-dev/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/10m_cultural/ne_10m_admin_2_counties.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1000x800 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"f75ad0c2297c4f6e7158963f813407ed","path":"/mrms-cookbook/build/f75ad0c2297c4f6e7158963f813407ed.png"}}}],"key":"AOVZAHIFqM"}],"key":"FHlFnxQC7H"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Convert lat/lon coordinates from MRMS subset\nlats = subset.latitude.values\nlons = subset.longitude.values\n\n# Ensure correct orientation (ascending order for interpolator)\nif lats[0] > lats[-1]:\n    lats = lats[::-1]\n    subset = subset[::-1, :]\n\n# Create interpolator (convert to inches)\ninterp_func = RegularGridInterpolator(\n    (lats, lons), (subset / 25.4).values, bounds_error=False, fill_value=np.nan\n)\n\n# Convert ASOS longitude from degrees west to degrees east (0â€“360)\ndaily_precip[\"lon_east\"] = daily_precip[\"lon\"].apply(lambda x: x if x >= 0 else 360 + x)\n\nstation_coords = list(zip(daily_precip[\"lat\"], daily_precip[\"lon_east\"]))\ndaily_precip[\"mrms_in\"] = interp_func(station_coords)\n\n\ndaily_precip[\"bias\"] = daily_precip[\"precip_in\"] - daily_precip[\"mrms_in\"]\n","key":"u8s5HKgb7m"},{"type":"output","id":"xYjSeLYS5dqLVjH1XFTQn","data":[],"key":"pDtZNiuGtT"}],"key":"hPjPA6gUy9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Compute bias normalization\nvmax = np.nanmax(np.abs(daily_precip[\"bias\"]))\n\n# Define bias levels (nonlinear, symmetric)\nbias_levels = [-20, -10, -5, -2, -1, -0.5, -0.1, 0, 0.1, 0.5, 1, 2, 5, 10, 20]\n\n# Create BoundaryNorm\nnorm_bias = mcolors.BoundaryNorm(bias_levels, ncolors=plt.get_cmap(\"balance\").N, clip=True)\n\n\n# Compute scatter sizes based on bias magnitude (optional scaling factor)\nsizes = np.sqrt(np.abs(daily_precip[\"bias\"])) * 150  # tweak 100 as needed\n\n# Create figure and axis\nfig = plt.figure(figsize=(10, 8))\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n\n# Basemap features\nax.add_feature(cfeature.COASTLINE, linewidth=1, edgecolor=\"white\")\nax.add_feature(cfeature.BORDERS, linewidth=1, edgecolor=\"white\")\nax.add_feature(cfeature.STATES, linewidth=0.5, edgecolor=\"white\")\nax.add_feature(\n    cfeature.NaturalEarthFeature(\n        category=\"cultural\",\n        name=\"admin_2_counties\",\n        scale=\"10m\",\n        facecolor=\"none\",\n        edgecolor=\"white\",\n        linewidth=0.3,\n    )\n)\n\n# Pcolormesh for MRMS\nmesh = ax.pcolormesh(\n    subset.longitude,\n    subset.latitude,\n    subset / 25.4,  # Convert mm to inches\n    norm=norm,\n    cmap=\"ChaseSpectral\",\n    transform=ccrs.PlateCarree(),\n)\n\nsc = ax.scatter(\n    daily_precip[\"lon\"],\n    daily_precip[\"lat\"],\n    c=daily_precip[\"bias\"],\n    s=sizes,\n    cmap=\"balance\",  # cmocean or any diverging colormap\n    norm=norm_bias,\n    edgecolor=\"black\",\n    linewidth=0.4,\n    transform=ccrs.PlateCarree(),\n    zorder=10,\n)\n\n# Add text labels for each station's bias\nfor _, row in daily_precip.iterrows():\n    bias_val = row[\"bias\"]\n    if not np.isnan(bias_val):\n        ax.text(\n            row[\"lon\"], row[\"lat\"],\n            f\"{bias_val:.2f}\\\"\",\n            fontsize=6,\n            ha=\"center\", va=\"center\",\n            transform=ccrs.PlateCarree(),\n            zorder=11,\n            color=\"white\" if abs(bias_val) > 0.5 else \"black\",  # adjust for contrast\n        )\n\n\n\n# Bias colorbar (scatter)\ncb1 = plt.colorbar(sc, ax=ax, orientation=\"horizontal\", pad=0.05, shrink=0.8, aspect=50)\ncb1.set_label(\"ASOS - MRMS Bias (in)\")\ncb1.set_ticks(bias_levels)\ncb1.ax.tick_params(labelsize=10)\n\n\n\n# Add second colorbar (MRMS QPE from pcolormesh)\ncb2 = plt.colorbar(mesh, ax=ax, orientation=\"vertical\", pad=0.02, shrink=0.8)\ncb2.set_label(\"MRMS QPE (in)\")\ncb2.ax.tick_params(labelsize=10)\n\n# Title and layout\nax.set_title(\"ASOS vs. MRMS Radar-Only QPE Bias (July 4, 2025)\", fontsize=16)\nplt.tight_layout()\n","key":"OuiyDR8cr3"},{"type":"output","id":"1w02Vbd1ZFQA91V_ii3Es","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1000x800 with 3 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e755b18d07e27a19ce9724359e1a1162","path":"/mrms-cookbook/build/e755b18d07e27a19ce9724359e1a1162.png"}}}],"key":"U0y3SJEXuf"}],"key":"vqJAZuS41y"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Compare MRMS Radar-Only to Pass 1 and Pass 2 QPE","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mgo6uppfZl"}],"identifier":"compare-mrms-radar-only-to-pass-1-and-pass-2-qpe","label":"Compare MRMS Radar-Only to Pass 1 and Pass 2 QPE","html_id":"compare-mrms-radar-only-to-pass-1-and-pass-2-qpe","implicit":true,"key":"SPYjVIOvi6"}],"key":"er8ZGR1oRF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def load_mrms_qpe_24h(date_str, product=\"RadarOnly_QPE_24H_00.00\",\n                      lat_bounds=(28, 33), lon_bounds=(-102.5, -96.5)):\n    \"\"\"\n    Loads and subsets MRMS 24-hour radar-only QPE data from AWS.\n\n    Parameters:\n    ----------\n    date_str : str\n        Date in 'YYYYMMDD' format (e.g., '20250705')\n    product : str\n        MRMS product folder (default: 'RadarOnly_QPE_24H_00.00' for Pass1)\n    lat_bounds : tuple\n        Tuple of (lat_min, lat_max)\n    lon_bounds : tuple\n        Tuple of (lon_min, lon_max) in degrees west\n\n    Returns:\n    -------\n    subset : xarray.DataArray\n        Subset of MRMS QPE field for given domain and date\n    \"\"\"\n\n    # Access file listing on AWS\n    aws = s3fs.S3FileSystem(anon=True)\n    mrms_path = f\"noaa-mrms-pds/CONUS/{product}/{date_str}/\"\n    file_list = aws.ls(mrms_path)\n\n    # Only grab the first GRIB2 file for the day (should end in 0000.grib2.gz)\n    grib_path = next((f for f in file_list if f.endswith(\".grib2.gz\")), None)\n    if grib_path is None:\n        raise FileNotFoundError(f\"No GRIB2 file found for {date_str} in {product}\")\n\n    url = \"https://noaa-mrms-pds.s3.amazonaws.com/\" + grib_path[len(\"noaa-mrms-pds/\"):]\n    response = urllib.request.urlopen(url)\n    compressed_file = response.read()\n\n    with tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n        f.write(gzip.decompress(compressed_file))\n        f.flush()\n        data = xr.load_dataarray(f.name, engine='cfgrib', decode_timedelta=True)\n\n    # Subset domain\n    lat_min, lat_max = lat_bounds\n    lon_min, lon_max = lon_bounds\n    subset = data.sel(\n        latitude=slice(lat_max, lat_min),\n        longitude=slice(360 - abs(lon_min), 360 - abs(lon_max)),\n    ).copy(deep=True)\n\n    # Clean up\n    del data\n\n    return subset","key":"rbhGEU6FMk"},{"type":"output","id":"7N6veg0g1ZaBkyLl19NKG","data":[],"key":"W0RgU1MmZT"}],"key":"VIFCnmLArX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"subset_pass1 = load_mrms_qpe_24h(\"20250705\", product=\"MultiSensor_QPE_24H_Pass1_00.00\")\nsubset_pass2 = load_mrms_qpe_24h(\"20250705\", product=\"MultiSensor_QPE_24H_Pass2_00.00\")","key":"rDAt0Arzku"},{"type":"output","id":"FxenlOQBfOx7t0lh4fHwX","data":[],"key":"JXVo1AtfV5"}],"key":"D7MjXjaoqq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Define levels and normalization\nlevels = [\n    0, 0.01, 0.1, 0.25, 0.50, 1, 1.5, 2, 2.5,\n    3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18\n]\ncmap = plt.get_cmap(\"ChaseSpectral\")\nnorm = mcolors.BoundaryNorm(levels, ncolors=cmap.N, clip=False)\n\n# Create figure and subplots\nfig, axes = plt.subplots(\n    1, 3, figsize=(15, 6),\n    subplot_kw={\"projection\": ccrs.PlateCarree()}\n)\n\n# Title mapping\ntitles = [\n    \"Radar-Only QPE\",\n    \"Gauge-Corrected QPE (Pass 1)\",\n    \"Gauge-Corrected QPE (Pass 2)\"\n]\n\n# Loop through datasets and plot\nfor ax, data, title in zip(\n    axes,\n    [subset, subset_pass1, subset_pass2],\n    titles\n):\n    ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n\n    # Basemap features\n    ax.add_feature(cfeature.COASTLINE, linewidth=1, edgecolor=\"white\")\n    ax.add_feature(cfeature.BORDERS, linewidth=1, edgecolor=\"white\")\n    ax.add_feature(cfeature.STATES, linewidth=0.5, edgecolor=\"white\")\n    ax.add_feature(\n        cfeature.NaturalEarthFeature(\n            category=\"cultural\",\n            name=\"admin_2_counties\",\n            scale=\"10m\",\n            facecolor=\"none\",\n            edgecolor=\"white\",\n            linewidth=0.3,\n        )\n    )\n\n    # Pcolormesh plot\n    mesh = ax.pcolormesh(\n        data.longitude,\n        data.latitude,\n        data / 25.4,  # mm to inches\n        norm=norm,\n        cmap=cmap,\n        transform=ccrs.PlateCarree(),\n    )\n\n    ax.set_title(title, fontsize=13)\n\n# Shared colorbar below all plots\ncb = fig.colorbar(\n    mesh, ax=axes, orientation=\"horizontal\", pad=0.08, aspect=50, shrink=0.8\n)\ncb.set_label(\"24-Hour Rainfall (in)\", fontsize=12)\ncb.set_ticks(levels)\ncb.set_ticklabels([f\"{level:.2f}\" for level in levels])\ncb.ax.tick_params(labelsize=10, rotation=45)\n\nplt.suptitle(\"MRMS 24-Hour QPE Products (July 4, 2025)\", fontsize=16)\nplt.tight_layout(rect=[0, 0.25, 1, 0.98])  # leave space for suptitle and colorbar\nplt.show()\n","key":"yHNUirhInV"},{"type":"output","id":"Pit07_fFzXorwb5h3lpTK","data":[{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_3788/732490426.py:67: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  plt.tight_layout(rect=[0, 0.25, 1, 0.98])  # leave space for suptitle and colorbar\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x600 with 4 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"57a3ce795173c73afa8dbe650372467a","path":"/mrms-cookbook/build/57a3ce795173c73afa8dbe650372467a.png"}}}],"key":"scmcsXbA1f"}],"key":"Nl8HLuzBpJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Compute differences in inches\nbias_pass1 = (subset_pass1 - subset) / 25.4\nbias_pass2 = (subset_pass2 - subset) / 25.4\n\n# Define nonlinear boundaries for bias (symmetric)\nbias_levels = [-16, -10, -5, -2, -1, -0.5, -0.1, 0, 0.1, 0.5, 1, 2, 5, 10, 16]\nnorm_bias = mcolors.BoundaryNorm(bias_levels, ncolors=plt.get_cmap(\"balance\").N, clip=True)\n\n# Create figure and subplots\nfig, axes = plt.subplots(\n    1, 2, figsize=(12, 6), constrained_layout=True,\n    subplot_kw={\"projection\": ccrs.PlateCarree()}\n)\n\n# Titles\ntitles = [\n    \"Pass 1 â€“ Radar-Only Bias (in)\",\n    \"Pass 2 â€“ Radar-Only Bias (in)\"\n]\n\n# Loop through plots\nfor ax, bias_data, title in zip(\n    axes,\n    [bias_pass1, bias_pass2],\n    titles\n):\n    ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n\n    # Basemap features\n    ax.add_feature(cfeature.COASTLINE, linewidth=1, edgecolor=\"white\")\n    ax.add_feature(cfeature.BORDERS, linewidth=1, edgecolor=\"white\")\n    ax.add_feature(cfeature.STATES, linewidth=0.5, edgecolor=\"white\")\n    ax.add_feature(\n        cfeature.NaturalEarthFeature(\n            category=\"cultural\",\n            name=\"admin_2_counties\",\n            scale=\"10m\",\n            facecolor=\"none\",\n            edgecolor=\"white\",\n            linewidth=0.3,\n        )\n    )\n\n    # Pcolormesh\n    mesh = ax.pcolormesh(\n        bias_data.longitude,\n        bias_data.latitude,\n        bias_data,\n        cmap=\"balance\",  # diverging colormap\n        norm=norm_bias,\n        transform=ccrs.PlateCarree(),\n    )\n\n    ax.set_title(title, fontsize=13)\n\n# Shared colorbar\ncb = fig.colorbar(\n    mesh, ax=axes, orientation=\"horizontal\", pad=0.08, aspect=50, shrink=0.8\n)\ncb.set_label(\"Gauge-Corrected Bias from Radar-Only QPE (in)\", fontsize=12)\ncb.set_ticks(bias_levels)\ncb.ax.tick_params(labelsize=10, rotation=45)\n\n# Suptitle and layout\nplt.suptitle(\"MRMS 24-Hour Gauge Correction Bias (July 4, 2025)\", fontsize=16)\nplt.show()\n","key":"gLkfHJnZmk"},{"type":"output","id":"y9jilwt9M6tAmbGKdPWOC","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1200x600 with 3 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"369241c03984eddba12a32ac9bd7eac7","path":"/mrms-cookbook/build/369241c03984eddba12a32ac9bd7eac7.png"}}}],"key":"qCV5psxMjW"}],"key":"Cu7DrfpFw8"}],"key":"wsViMBwhI1"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Chapter 1: Multi Radar/ Multi Sensor (MRMS) System: Overview, Case Studies, and More!","url":"/notebooks/ch1-introduction","group":"MRMS Cookbook"},"next":{"title":"NOAA Multi-Radar / Multi-Sensor System (MRMS) at the BNF Field Site(s)","url":"/notebooks/bnf-mrms-qpe-hourly","group":"MRMS Cookbook"}}},"domain":"http://localhost:3000"}