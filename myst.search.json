{"version":"1","records":[{"hierarchy":{"lvl1":"MRMS Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"MRMS Cookbook"},"content":"\n\n\n\n\n [![DOI](https://zenodo.org/badge/475509405.svg)](https://zenodo.org/badge/latestdoi/475509405) \n\nThis Project Pythia Cookbook covers how to access, analyze, and visualize Multi-radar, Multi-sensor (MRMS) Data.","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":2},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl2":"Motivation"},"content":"The Multi-Radar, Multi-Sensor (MRMS) System combines radar, surface, and upper-air observation to produce a high-resolution (1 km) dataset used by researchers and forecasters alike. Despite its use, there are few published Python workflows that illustrate how to access MRMS data from Amazon Web Services (AWS) and produce beautiful, useful visualizations. We hope this cookbook serves the MRMS-user community well!","type":"content","url":"/#motivation","position":3},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":4},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl2":"Authors"},"content":"","type":"content","url":"/#authors","position":5},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":6},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":7},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":8},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl2":"Structure"},"content":"Chapter 1 offers a brief overview of MRMS data and provides context for how the data is organized on AWS.\n\nChapter 2 contains a case study of the \n\nMarch 24–27 2023 Tornado Outbreak, showcasing fields relevant to severe weather prediction.\n\nChapter 3 examines another recent severe weather event, the \n\nJuly 2025 Central Texas Floods, instead focusing on precipitation fields and \n\nFLASH output, including comparisons to station observations.\n\nChapter 4 compares MRMS-derived precipitation estimates at Bankhead National Forest (BNF) Field Sites.\n\nChapter 5 offers a real-time look at MRMS data with the opportunity to select certain data fields.","type":"content","url":"/#structure","position":9},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":10},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":11},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":12},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.\n\nNote: not all Cookbook chapters are executable. If you do not see\nthe rocket ship icon, such as on this page, you are not viewing an\nexecutable book chapter.","type":"content","url":"/#running-on-binder","position":13},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":14},{"hierarchy":{"lvl1":"MRMS Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\nClone the https://github.com/ProjectPythia/mrms-cookbook repository: git clone https://github.com/ProjectPythia/mrms-cookbook.git\n\nMove into the mrms-cookbook directorycd mrms-cookbook\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate mrms-cookbook-dev\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":15},{"hierarchy":{"lvl1":"Chapter 2: Case Study"},"type":"lvl1","url":"/notebooks/ch2-mar-2023-tornado-jdh","position":0},{"hierarchy":{"lvl1":"Chapter 2: Case Study"},"content":"","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh","position":1},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"March 24-27, 2023 Tornado Outbreak"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#march-24-27-2023-tornado-outbreak","position":2},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"March 24-27, 2023 Tornado Outbreak"},"content":"\n\n\n\nNext, title your notebook appropriately with a top-level Markdown header, # (see the very first cell above). Do not use this level header anywhere else in the notebook. Our book build process will use this title in the navbar, table of contents, etc. Keep it short, keep it descriptive.\n\nFollow this with a --- cell to visually distinguish the transition to the prerequisites section.\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#march-24-27-2023-tornado-outbreak","position":3},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Overview"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#overview","position":4},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Overview"},"content":"The tornado outbreak of March 24–27, 2023 was a devastating multi-day severe weather event that swept across the Southern United States, particularly impacting Mississippi, Alabama, Tennessee, and Georgia. Triggered by a slow-moving upper-level trough interacting with moist, unstable air from the Gulf of Mexico, the outbreak produced 35 confirmed tornadoes, including a violent EF4 that tore through Rolling Fork, Midnight, and Silver City, Mississippi with peak winds of 195 mph. That tornado alone caused catastrophic damage and multiple fatalities, prompting tornado emergencies and widespread destruction.\nOver the four-day span, the system also unleashed damaging straight-line winds, large hail, and flooding. In total, the outbreak resulted in 23 fatalities (plus two from non-tornadic causes), over 230 injuries, and an estimated $1.9 billion in damage. The event was notable not only for its intensity but also for its geographic breadth and the prolonged nature of the severe weather threat.\n\nThis chapter explores MRMS data from this tornado outbreak, using:\n\nReflectivity\n\nRotation\n\nHail Swaths\n\nLocal Storm Reports\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#overview","position":5},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#imports","position":6},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Imports"},"content":"\n\nimport sys\nimport s3fs\nimport urllib\nimport tempfile\nimport gzip\nimport xarray as xr\nimport xarray\nimport io\nimport numpy as np\nimport cartopy\nimport datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#imports","position":7},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Build Map"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#build-map","position":8},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Build Map"},"content":"","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#build-map","position":9},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"This section uses Cartopy to build a map.","lvl2":"Build Map"},"type":"lvl4","url":"/notebooks/ch2-mar-2023-tornado-jdh#this-section-uses-cartopy-to-build-a-map","position":10},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"This section uses Cartopy to build a map.","lvl2":"Build Map"},"content":"\n\n# Set up the map projection\nprojection = ccrs.LambertConformal(central_longitude=-96, central_latitude=39)\n\n# Create the figure and axes\nfig, ax = plt.subplots(figsize=(12, 8), subplot_kw={'projection': projection})\n\n# Set extent for CONUS (approximate)\nax.set_extent([-125, -66.5, 24, 50], crs=ccrs.PlateCarree())\n\n# Add geographic features\nax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='gray')\nax.add_feature(cfeature.BORDERS.with_scale('50m'), linestyle='--', edgecolor='black')\nax.add_feature(cfeature.COASTLINE.with_scale('50m'))\n\n# Optional: remove ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Add title\nplt.title(\"Blank Map\", fontsize=18)\n\nplt.show()\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#this-section-uses-cartopy-to-build-a-map","position":11},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"We will be looking specifically at the tornado outbreak that occurred in Dixie Alley, so let’s set our extents specifically to Dixie Alley.","lvl2":"Build Map"},"type":"lvl4","url":"/notebooks/ch2-mar-2023-tornado-jdh#we-will-be-looking-specifically-at-the-tornado-outbreak-that-occurred-in-dixie-alley-so-lets-set-our-extents-specifically-to-dixie-alley","position":12},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"We will be looking specifically at the tornado outbreak that occurred in Dixie Alley, so let’s set our extents specifically to Dixie Alley.","lvl2":"Build Map"},"content":"\n\nlon_min, lon_max = -96, -80\nlat_min, lat_max = 29, 38\n\n# Set up the map projection\nprojection = ccrs.LambertConformal(central_longitude=-88, central_latitude=34)\n\n# Create the figure and axes\nfig, ax = plt.subplots(figsize=(12, 8), subplot_kw={'projection': projection})\n\n# Set extent for CONUS (approximate)\nax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n\n# Add geographic features\nax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='gray')\nax.add_feature(cfeature.BORDERS.with_scale('50m'), linestyle='--', edgecolor='black')\nax.add_feature(cfeature.COASTLINE.with_scale('50m'))\n\n# Optional: remove ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Add title\nplt.title(\"Blank Dixie Alley Map\", fontsize=18)\n\nplt.show()\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#we-will-be-looking-specifically-at-the-tornado-outbreak-that-occurred-in-dixie-alley-so-lets-set-our-extents-specifically-to-dixie-alley","position":13},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"Great, now we can highlight our case study!","lvl2":"Build Map"},"type":"lvl4","url":"/notebooks/ch2-mar-2023-tornado-jdh#great-now-we-can-highlight-our-case-study","position":14},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"Great, now we can highlight our case study!","lvl2":"Build Map"},"content":"\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#great-now-we-can-highlight-our-case-study","position":15},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Fetch Data"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#fetch-data","position":16},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Fetch Data"},"content":"","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#fetch-data","position":17},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"This section uses s3 to pull in the data from the AWS s3 server. Following data acquisition, the module uses xarray to filter the resulting DataArray for the size of the desired map.","lvl2":"Fetch Data"},"type":"lvl4","url":"/notebooks/ch2-mar-2023-tornado-jdh#this-section-uses-s3-to-pull-in-the-data-from-the-aws-s3-server-following-data-acquisition-the-module-uses-xarray-to-filter-the-resulting-dataarray-for-the-size-of-the-desired-map","position":18},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"This section uses s3 to pull in the data from the AWS s3 server. Following data acquisition, the module uses xarray to filter the resulting DataArray for the size of the desired map.","lvl2":"Fetch Data"},"content":"","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#this-section-uses-s3-to-pull-in-the-data-from-the-aws-s3-server-following-data-acquisition-the-module-uses-xarray-to-filter-the-resulting-dataarray-for-the-size-of-the-desired-map","position":19},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl5":"For variable names, see link here.","lvl4":"This section uses s3 to pull in the data from the AWS s3 server. Following data acquisition, the module uses xarray to filter the resulting DataArray for the size of the desired map.","lvl2":"Fetch Data"},"type":"lvl5","url":"/notebooks/ch2-mar-2023-tornado-jdh#for-variable-names-see-link-here","position":20},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl5":"For variable names, see link here.","lvl4":"This section uses s3 to pull in the data from the AWS s3 server. Following data acquisition, the module uses xarray to filter the resulting DataArray for the size of the desired map.","lvl2":"Fetch Data"},"content":"\n\n# def fetch_mrms_data(variable: str, yyyymmdd: str, hh: str) -> xr.DataArray:\n#     \"\"\"\n#     Downloads and loads MRMS data from NOAA PDS.\n\n#     Parameters:\n#         variable (str): MRMS product name (e.g., 'MergedReflectivityQC').\n#         yyyymmdd (str): Date in YYYYMMDD format.\n#         hh (str): Hour in HH format (00–23 UTC).\n\n#     Returns:\n#         xarray.DataArray: Decoded MRMS data array.\n#     \"\"\"\n#     url = (\n#         f\"https://noaa-mrms-pds.s3.amazonaws.com/CONUS/{variable}/\"\n#         f\"{yyyymmdd}/MRMS_{variable}_{yyyymmdd}-{hh}0000.grib2.gz\"\n#     )\n\n#     response = urllib.request.urlopen(url)\n#     compressed_file = response.read()\n\n#     with tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n#         f.write(gzip.decompress(compressed_file))\n#         data_in = xr.load_dataarray(f.name, engine='cfgrib', decode_timedelta=True)\n\n#     return data_in\n\ndef fetch_mrms_data(\n    variable: str,\n    yyyymmdd: str,\n    hh: str,\n    lon_min: float = None,\n    lat_min: float = None,\n    lon_max: float = None,\n    lat_max: float = None\n) -> xr.DataArray:\n    \"\"\"\n    Downloads and loads MRMS data from NOAA PDS, with optional spatial filtering.\n\n    Parameters:\n        variable (str): MRMS product name (e.g., 'MergedReflectivityQC').\n        yyyymmdd (str): Date in YYYYMMDD format.\n        hh (str): Hour in HH format (00–23 UTC).\n        lon_min, lat_min, lon_max, lat_max (float, optional): Bounding box for spatial subset. \n\n    Returns:\n        xarray.DataArray: Decoded MRMS data array, optionally subset by lat/lon.\n\n    Example use: \n        data = fetch_mrms_data('MergedReflectivityQC', '20230325', '02', lon_min=-96, lat_min=29, lon_max=-80, lat_max=38)\n    \"\"\"\n    url = (\n        f\"https://noaa-mrms-pds.s3.amazonaws.com/CONUS/{variable}/\"\n        f\"{yyyymmdd}/MRMS_{variable}_{yyyymmdd}-{hh}0000.grib2.gz\"\n    )\n\n    response = urllib.request.urlopen(url)\n    compressed_file = response.read()\n\n    with tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n        f.write(gzip.decompress(compressed_file))\n        data_in = xr.load_dataarray(f.name, engine='cfgrib', decode_timedelta=True)\n\n    # Optional spatial filtering\n    if all(v is not None for v in [lon_min, lat_min, lon_max, lat_max]):\n        data_in = data_in.sel(\n            latitude=slice(lat_max, lat_min),  # descending order\n            longitude=slice(360 - abs(lon_min), 360 - abs(lon_max))        \n        )\n\n    return data_in\n\n# response = urllib.request.urlopen(\"https://noaa-mrms-pds.s3.amazonaws.com/CONUS/CREF_1HR_MAX_00.50/20230325/MRMS_CREF_1HR_MAX_00.50_20230325-010000.grib2.gz\")\n\n# compressed_file = response.read()\n\n# with tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n#             f.write(gzip.decompress(compressed_file))\n#             data_in = xr.load_dataarray(f.name, engine='cfgrib', decode_timedelta=True)\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#for-variable-names-see-link-here","position":21},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Case Study - March 24, 2023"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#case-study-march-24-2023","position":22},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Case Study - March 24, 2023"},"content":"","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#case-study-march-24-2023","position":23},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Rolling Fork - Silver City, MS Tornado","lvl2":"Case Study - March 24, 2023"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#rolling-fork-silver-city-ms-tornado","position":24},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Rolling Fork - Silver City, MS Tornado","lvl2":"Case Study - March 24, 2023"},"content":"","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#rolling-fork-silver-city-ms-tornado","position":25},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"3/25/23 1z to 2z","lvl2":"Case Study - March 24, 2023"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#id-3-25-23-1z-to-2z","position":26},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"3/25/23 1z to 2z","lvl2":"Case Study - March 24, 2023"},"content":"\n\n# Lon mins and maxes for our projections:\nlon_min, lon_max = -96, -80\nlat_min, lat_max = 29, 38\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#id-3-25-23-1z-to-2z","position":27},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Maximum 1-Hour Composite Reflectivity","lvl2":"Case Study - March 24, 2023"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#maximum-1-hour-composite-reflectivity","position":28},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Maximum 1-Hour Composite Reflectivity","lvl2":"Case Study - March 24, 2023"},"content":"","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#maximum-1-hour-composite-reflectivity","position":29},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl5":"The MRMS Max 1-Hour Composite Reflectivity product represents the highest reflectivity value observed within the past hour across all radar scans, providing a time-integrated view of storm intensity. It helps forecasters identify areas of persistent or intense convection, especially useful for tracking severe weather like hail or heavy rainfall. This product is derived from a seamless mosaic of multiple radars, quality-controlled to remove non-meteorological artifacts.","lvl3":"Maximum 1-Hour Composite Reflectivity","lvl2":"Case Study - March 24, 2023"},"type":"lvl5","url":"/notebooks/ch2-mar-2023-tornado-jdh#the-mrms-max-1-hour-composite-reflectivity-product-represents-the-highest-reflectivity-value-observed-within-the-past-hour-across-all-radar-scans-providing-a-time-integrated-view-of-storm-intensity-it-helps-forecasters-identify-areas-of-persistent-or-intense-convection-especially-useful-for-tracking-severe-weather-like-hail-or-heavy-rainfall-this-product-is-derived-from-a-seamless-mosaic-of-multiple-radars-quality-controlled-to-remove-non-meteorological-artifacts","position":30},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl5":"The MRMS Max 1-Hour Composite Reflectivity product represents the highest reflectivity value observed within the past hour across all radar scans, providing a time-integrated view of storm intensity. It helps forecasters identify areas of persistent or intense convection, especially useful for tracking severe weather like hail or heavy rainfall. This product is derived from a seamless mosaic of multiple radars, quality-controlled to remove non-meteorological artifacts.","lvl3":"Maximum 1-Hour Composite Reflectivity","lvl2":"Case Study - March 24, 2023"},"content":"\n\n#### March 24, 2023 - Rolling Fork - Silver City, MS Tornado -- EF4, 71 minutes long, est winds 195 mph\n## 3/25/23 1z to 2z, so we'll grab two hours of data shortly\n\n#Grab 2 hours of data for plotting\ncref1z = fetch_mrms_data('CREF_1HR_MAX_00.50', '20230325', '01')\ncref2z = fetch_mrms_data('CREF_1HR_MAX_00.50', '20230325', '02')\n# Mask fill values for both datasets\nmasked1 = np.ma.masked_where(cref1z == -99.0, cref1z)\nmasked2 = np.ma.masked_where(cref2z == -99.0, cref2z)\n\n# Define bounds for Dixie Alley\nprojection = ccrs.LambertConformal(central_longitude=-88, central_latitude=34)\n\n# Create side-by-side subplots\nfig, axes = plt.subplots(\n    1, 2, figsize=(16, 8),\n    subplot_kw={'projection': projection},\n    gridspec_kw={'bottom': 0.2}  # leave room for shared colorbar\n)\n\nmeshes = []\nfor ax, masked, title in zip(axes, [masked1, masked2], [\"(a) 3/25/2023 @ 01z\", \"(b) 3/25/2023 @ 02z\"]):\n    ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n    ax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='gray')\n    ax.add_feature(cfeature.BORDERS.with_scale('50m'), linestyle='--', edgecolor='black')\n    ax.add_feature(cfeature.COASTLINE.with_scale('50m'))\n    \n    mesh = ax.pcolormesh(\n        cref2z.longitude, cref2z.latitude, masked,\n        cmap='turbo', transform=ccrs.PlateCarree(), shading='auto'\n    )\n    ax.set_title(title, fontsize=15)\n    meshes.append(mesh)\n\n# Add shared colorbar beneath both plots\ncbar_ax = fig.add_axes([0.25, 0.25, 0.5, 0.02])  # [left, bottom, width, height]\ncbar = fig.colorbar(meshes[0], cax=cbar_ax, orientation='horizontal')\ncbar.set_label('Reflectivity (dBZ)')\nplt.suptitle('Max 1HR Composite Reflectivity:', fontsize='20', x=0.5, y=0.85, horizontalalignment='center', verticalalignment='top')\n\nplt.show()\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#the-mrms-max-1-hour-composite-reflectivity-product-represents-the-highest-reflectivity-value-observed-within-the-past-hour-across-all-radar-scans-providing-a-time-integrated-view-of-storm-intensity-it-helps-forecasters-identify-areas-of-persistent-or-intense-convection-especially-useful-for-tracking-severe-weather-like-hail-or-heavy-rainfall-this-product-is-derived-from-a-seamless-mosaic-of-multiple-radars-quality-controlled-to-remove-non-meteorological-artifacts","position":31},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Surface Precip Rate","lvl2":"Case Study - March 24, 2023"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#surface-precip-rate","position":32},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Surface Precip Rate","lvl2":"Case Study - March 24, 2023"},"content":"To describe Surface Precip Rate, there are three variables that can be used:","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#surface-precip-rate","position":33},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"Surface Precipitation Rate Products","lvl3":"Surface Precip Rate","lvl2":"Case Study - March 24, 2023"},"type":"lvl4","url":"/notebooks/ch2-mar-2023-tornado-jdh#surface-precipitation-rate-products","position":34},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl4":"Surface Precipitation Rate Products","lvl3":"Surface Precip Rate","lvl2":"Case Study - March 24, 2023"},"content":"Variable Name\n\nDescription\n\nTemporal Resolution\n\nFilename Pattern\n\nInstantaneous PrecipRate\n\n- Estimates current rainfall intensity- Derived from dual-pol radar\n\n- Every 2 minutes\n\nPrecipRate_00.00\n\nMultiSensor QPE (Pass 1)\n\n- Combines radar and precip gauge data- Available in 1-pass and 2-pass versions- Used for hourly accumulation\n\nHourly (Pass 1 and Pass 2)\n\nMRMS_QPE_01H_Pass1_00.00\n\nRadarOnly QPE\n\n- Estimates surface rainfall rate using dual-polarization radar reflectivity.- Captures rapid changes in precipitation intensity at high temporal resolution.\n\n- Every 2 minutes - Available in 15 minute as well as (1, 3, 6, 12, 24, 48) hour intervals- QPE since 12z also available\n\nRadarOnly_QPE_01H_00.00\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#surface-precipitation-rate-products","position":35},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Instantaneous Precip Rate","lvl2":"Case Study - March 24, 2023"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#instantaneous-precip-rate","position":36},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Instantaneous Precip Rate","lvl2":"Case Study - March 24, 2023"},"content":"\n\nprecip_1z = fetch_mrms_data('PrecipRate_00.00', '20230325', '01') # Precip Rate\nprecip_2z = fetch_mrms_data('PrecipRate_00.00', '20230325', '02')\nmasked1 = np.ma.masked_where(precip_1z <= 0, precip_1z)\nmasked2 = np.ma.masked_where(precip_2z <= 0, precip_2z)\n\n# Define bounds for Dixie Alley\nprojection = ccrs.LambertConformal(central_longitude=-88, central_latitude=34)\n\n# Create side-by-side subplots\nfig, axes = plt.subplots(\n    1, 2, figsize=(16, 8),\n    subplot_kw={'projection': projection},\n    gridspec_kw={'bottom': 0.2}  # leave room for shared colorbar\n)\n\nmeshes = []\nfor ax, masked, title in zip(axes, [masked1, masked2], [\"(a) 3/25/2023 @ 01z\", \"(b) 3/25/2023 @ 02z\"]):\n    ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n    ax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='gray')\n    ax.add_feature(cfeature.BORDERS.with_scale('50m'), linestyle='--', edgecolor='black')\n    ax.add_feature(cfeature.COASTLINE.with_scale('50m'))\n    \n    mesh = ax.pcolormesh(\n        precip_1z.longitude, precip_2z.latitude, masked,\n        cmap='turbo', transform=ccrs.PlateCarree(), shading='auto'\n    )\n    ax.set_title(title, fontsize=15)\n    meshes.append(mesh)\n\n# Add shared colorbar beneath both plots\ncbar_ax = fig.add_axes([0.25, 0.25, 0.5, 0.02])  # [left, bottom, width, height]\ncbar = fig.colorbar(meshes[0], cax=cbar_ax, orientation='horizontal')\ncbar.set_label('Precipitation (mm)')\nplt.suptitle('Instantaneous Precipitation', fontsize='20', x=0.5, y=0.85, horizontalalignment='center', verticalalignment='top')\n\nplt.show()\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#instantaneous-precip-rate","position":37},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"MultiSensorQPE - 1 Hour - Pass 1","lvl2":"Case Study - March 24, 2023"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#multisensorqpe-1-hour-pass-1","position":38},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"MultiSensorQPE - 1 Hour - Pass 1","lvl2":"Case Study - March 24, 2023"},"content":"\n\n# MultiSensor_QPE_01H_Pass1_00.00\nQPE_1z = fetch_mrms_data('MultiSensor_QPE_01H_Pass1_00.00', '20230325', '01') # QPE: Quantified Precip Estimation - Offered hourly.\nQPE_2z = fetch_mrms_data('MultiSensor_QPE_01H_Pass1_00.00', '20230325', '02') \nmasked1 = np.ma.masked_where(QPE_1z <= 0, QPE_1z)\nmasked2 = np.ma.masked_where(QPE_2z <= 0, QPE_2z)\n\n# Define bounds for Dixie Alley\nprojection = ccrs.LambertConformal(central_longitude=-88, central_latitude=34)\n\n# Create side-by-side subplots\nfig, axes = plt.subplots(\n    1, 2, figsize=(16, 8),\n    subplot_kw={'projection': projection},\n    gridspec_kw={'bottom': 0.2}  # leave room for shared colorbar\n)\n\nmeshes = []\nfor ax, masked, title in zip(axes, [masked1, masked2], [\"(a) 3/25/2023 @ 01z\", \"(b) 3/25/2023 @ 02z\"]):\n    ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n    ax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='gray')\n    ax.add_feature(cfeature.BORDERS.with_scale('50m'), linestyle='--', edgecolor='black')\n    ax.add_feature(cfeature.COASTLINE.with_scale('50m'))\n    \n    mesh = ax.pcolormesh(\n        QPE_1z.longitude, QPE_2z.latitude, masked,\n        cmap='turbo', transform=ccrs.PlateCarree(), shading='auto'\n    )\n    ax.set_title(title, fontsize=15)\n    meshes.append(mesh)\n\n# Add shared colorbar beneath both plots\ncbar_ax = fig.add_axes([0.25, 0.25, 0.5, 0.02])  # [left, bottom, width, height]\ncbar = fig.colorbar(meshes[0], cax=cbar_ax, orientation='horizontal')\ncbar.set_label('Precipitation (mm)')\nplt.suptitle('Multi-Sensor Quantified Precipitation Estimate (Pass 1):', fontsize='20', x=0.5, y=0.85, horizontalalignment='center', verticalalignment='top')\n\nplt.show()\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#multisensorqpe-1-hour-pass-1","position":39},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"MultiSensorQPE - 1 Hour - Pass 2","lvl2":"Case Study - March 24, 2023"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#multisensorqpe-1-hour-pass-2","position":40},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"MultiSensorQPE - 1 Hour - Pass 2","lvl2":"Case Study - March 24, 2023"},"content":"\n\n# MultiSensor_QPE_01H_Pass2_00.00\nQPE_1z_p2 = fetch_mrms_data('MultiSensor_QPE_01H_Pass2_00.00', '20230325', '01') # QPE: Quantified Precip Estimation - last hour, 2nd pass\nQPE_2z_p2 = fetch_mrms_data('MultiSensor_QPE_01H_Pass2_00.00', '20230325', '02') \nmasked1 = np.ma.masked_where(QPE_1z_p2 <= 0, QPE_1z_p2)\nmasked2 = np.ma.masked_where(QPE_2z_p2 <= 0, QPE_2z_p2)\n\n# Define bounds for Dixie Alley\nprojection = ccrs.LambertConformal(central_longitude=-88, central_latitude=34)\n\n# Create side-by-side subplots\nfig, axes = plt.subplots(\n    1, 2, figsize=(16, 8),\n    subplot_kw={'projection': projection},\n    gridspec_kw={'bottom': 0.2}  # leave room for shared colorbar\n)\n\nmeshes = []\nfor ax, masked, title in zip(axes, [masked1, masked2], [\"(a) 3/25/2023 @ 01z\", \"(b) 3/25/2023 @ 02z\"]):\n    ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n    ax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='gray')\n    ax.add_feature(cfeature.BORDERS.with_scale('50m'), linestyle='--', edgecolor='black')\n    ax.add_feature(cfeature.COASTLINE.with_scale('50m'))\n    \n    mesh = ax.pcolormesh(\n        QPE_1z_p2.longitude, QPE_2z_p2.latitude, masked,\n        cmap='turbo', transform=ccrs.PlateCarree(), shading='auto'\n    )\n    ax.set_title(title, fontsize=15)\n    meshes.append(mesh)\n\n# Add shared colorbar beneath both plots\ncbar_ax = fig.add_axes([0.25, 0.25, 0.5, 0.02])  # [left, bottom, width, height]\ncbar = fig.colorbar(meshes[0], cax=cbar_ax, orientation='horizontal')\ncbar.set_label('Precipitation (mm)')\nplt.suptitle('Multi-Sensor Quantified Precipitation Estimate (Pass 2):', fontsize='20', x=0.5, y=0.85, horizontalalignment='center', verticalalignment='top')\n\nplt.show()\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#multisensorqpe-1-hour-pass-2","position":41},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Radar Only QPE - Last Hour","lvl2":"Case Study - March 24, 2023"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#radar-only-qpe-last-hour","position":42},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"Radar Only QPE - Last Hour","lvl2":"Case Study - March 24, 2023"},"content":"\n\n# RadarOnly_QPE_01H_00.00\nRQPE_1z = fetch_mrms_data('RadarOnly_QPE_01H_00.00', '20230325', '01') # RadarOnly_QPE: Radar Only Quantified Precip Estimation - last hour\nRQPE_2z = fetch_mrms_data('RadarOnly_QPE_01H_00.00', '20230325', '02') \nmasked1 = np.ma.masked_where(RQPE_1z <= 0, RQPE_1z)\nmasked2 = np.ma.masked_where(RQPE_2z <= 0, RQPE_2z)\n\n# Define bounds for Dixie Alley\nprojection = ccrs.LambertConformal(central_longitude=-88, central_latitude=34)\n\n# Create side-by-side subplots\nfig, axes = plt.subplots(\n    1, 2, figsize=(16, 8),\n    subplot_kw={'projection': projection},\n    gridspec_kw={'bottom': 0.2}  # leave room for shared colorbar\n)\n\nmeshes = []\nfor ax, masked, title in zip(axes, [masked1, masked2], [\"(a) 3/25/2023 @ 01z\", \"(b) 3/25/2023 @ 02z\"]):\n    ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())\n    ax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='gray')\n    ax.add_feature(cfeature.BORDERS.with_scale('50m'), linestyle='--', edgecolor='black')\n    ax.add_feature(cfeature.COASTLINE.with_scale('50m'))\n    \n    mesh = ax.pcolormesh(\n        RQPE_1z.longitude, RQPE_2z.latitude, masked,\n        cmap='turbo', transform=ccrs.PlateCarree(), shading='auto'\n    )\n    ax.set_title(title, fontsize=15)\n    meshes.append(mesh)\n\n# Add shared colorbar beneath both plots\ncbar_ax = fig.add_axes([0.25, 0.25, 0.5, 0.02])  # [left, bottom, width, height]\ncbar = fig.colorbar(meshes[0], cax=cbar_ax, orientation='horizontal')\ncbar.set_label('Precipitation (mm)')\nplt.suptitle('Radar Only Quantified Precipitation Estimate:', fontsize='20', x=0.5, y=0.85, horizontalalignment='center', verticalalignment='top')\n\nplt.show()\n\n\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#radar-only-qpe-last-hour","position":43},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Rotation"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#rotation","position":44},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Rotation"},"content":"","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#rotation","position":45},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"These rotation products can be combined to assess both the intensity and persistence of storm-scale rotation across multiple atmospheric layers and time scales. By layering instantaneous azimuthal shear with rotation tracks—especially ML-enhanced versions—forecasters and researchers can better identify evolving mesocyclones, discriminate between transient and sustained rotation, and refine environmental risk assessments for severe weather and turbulence.","lvl2":"Rotation"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#these-rotation-products-can-be-combined-to-assess-both-the-intensity-and-persistence-of-storm-scale-rotation-across-multiple-atmospheric-layers-and-time-scales-by-layering-instantaneous-azimuthal-shear-with-rotation-tracks-especially-ml-enhanced-versions-forecasters-and-researchers-can-better-identify-evolving-mesocyclones-discriminate-between-transient-and-sustained-rotation-and-refine-environmental-risk-assessments-for-severe-weather-and-turbulence","position":46},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"These rotation products can be combined to assess both the intensity and persistence of storm-scale rotation across multiple atmospheric layers and time scales. By layering instantaneous azimuthal shear with rotation tracks—especially ML-enhanced versions—forecasters and researchers can better identify evolving mesocyclones, discriminate between transient and sustained rotation, and refine environmental risk assessments for severe weather and turbulence.","lvl2":"Rotation"},"content":"Variable\n\nDescription\n\nTemporal Resolution\n\nFilename Pattern\n\nMerged AzShear 0-2km AGL\n\nLow-level azimuthal shear (0–2 km AGL); highlights near-surface rotation.\n\nInstantaneous\n\nMergedAzShear_0-2kmAGL_00.50\n\nMerged Az Shear 3-6km AGL\n\nMid-level azimuthal shear (3–6 km AGL); captures elevated storm rotation.\n\nInstantaneous\n\nMergedAzShear_3-6kmAGL_00.50\n\nRotation Track 30min\n\n30-min accumulation of low-level rotation; useful for short-term tracking.\n\n30 minutes\n\nRotationTrack30min_00.50\n\nRotation Track 60min\n\n60-min accumulation of low-level rotation; highlights sustained activity.\n\n60 minutes\n\nRotationTrack60min_00.50\n\nRotation Track ML 30min\n\nML-enhanced 30-min rotation track; filters noise, boosts confidence.\n\n30 minutes\n\nRotationTrackML30min_00.50\n\nRotation Track ML 60min\n\nML-enhanced 60-min rotation track; detects short-lived intense rotation.\n\n60 minutes\n\nRotationTrackML60min_00.50\n\n# Naming convention is completely different! Would have to completely rewrite my method to get this - get plots similar to those above\n\n# MergedAzShear_0-2kmAGL_00.50\n\n\n\n\n# MergedAzShear_3-6kmAGL_00.50 -  for the sake of time, hold on this\n\n# RotationTrack30min_00.50 -  for the sake of time, hold on this\n# RotationTrack60min_00.50 -  for the sake of time, hold on this\n# RotationTrackML60min_00.50 -  for the sake of time, hold on this\n# RotationTrackML30min_00.50 -  for the sake of time, hold on this\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#these-rotation-products-can-be-combined-to-assess-both-the-intensity-and-persistence-of-storm-scale-rotation-across-multiple-atmospheric-layers-and-time-scales-by-layering-instantaneous-azimuthal-shear-with-rotation-tracks-especially-ml-enhanced-versions-forecasters-and-researchers-can-better-identify-evolving-mesocyclones-discriminate-between-transient-and-sustained-rotation-and-refine-environmental-risk-assessments-for-severe-weather-and-turbulence","position":47},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Hail Swaths"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#hail-swaths","position":48},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Hail Swaths"},"content":"\n\n# MESH - Maximum Expected Size of Hail - for the sake of time, hold on this\n# SHI_00.50 - Severe Hail Index\n# VII_00.50 - Vergically Integrated Ice\n# POSH_00.50\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#hail-swaths","position":49},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Storm Intensity - Vertically Integrated Liquid"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#storm-intensity-vertically-integrated-liquid","position":50},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Storm Intensity - Vertically Integrated Liquid"},"content":"\n\n# VIL_00.50\t\t\n# VIL_Density_00.50\t\t\t\n# VIL_Max_120min_00.50\n\n\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#storm-intensity-vertically-integrated-liquid","position":51},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#summary","position":52},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Summary"},"content":"Add one final --- marking the end of your body of content, and then conclude with a brief single paragraph summarizing at a high level the key pieces that were learned and how they tied to your objectives. Look to reiterate what the most important takeaways were.","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#summary","position":53},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"What’s next?","lvl2":"Summary"},"type":"lvl3","url":"/notebooks/ch2-mar-2023-tornado-jdh#whats-next","position":54},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl3":"What’s next?","lvl2":"Summary"},"content":"Let Jupyter book tie this to the next (sequential) piece of content that people could move on to down below and in the sidebar. However, if this page uniquely enables your reader to tackle other nonsequential concepts throughout this book, or even external content, link to it here!\n\n","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#whats-next","position":55},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Resources and references"},"type":"lvl2","url":"/notebooks/ch2-mar-2023-tornado-jdh#resources-and-references","position":56},{"hierarchy":{"lvl1":"Chapter 2: Case Study","lvl2":"Resources and references"},"content":"Finally, be rigorous in your citations and references as necessary. Give credit where credit is due. Also, feel free to link to relevant external material, further reading, documentation, etc. Then you’re done! Give yourself a quick review, a high five, and send us a pull request. A few final notes:\n\nKernel > Restart Kernel and Run All Cells... to confirm that your notebook will cleanly run from start to finish\n\nKernel > Restart Kernel and Clear All Outputs... before committing your notebook, our machines will do the heavy lifting\n\nTake credit! Provide author contact information if you’d like; if so, consider adding information here at the bottom of your notebook\n\nGive credit! Attribute appropriate authorship for referenced code, information, images, etc.\n\nOnly include what you’re legally allowed: no copyright infringement or plagiarism\n\nThank you for your contribution!","type":"content","url":"/notebooks/ch2-mar-2023-tornado-jdh#resources-and-references","position":57},{"hierarchy":{"lvl1":"Project Pythia Notebook Template"},"type":"lvl1","url":"/notebooks/ch3-txfloods","position":0},{"hierarchy":{"lvl1":"Project Pythia Notebook Template"},"content":"Let’s start here! If you can directly link to an image relevant to your notebook, such as \n\ncanonical logos, do so here at the top of your notebook. You can do this with MyST Markdown syntax, outlined in \n\nthis MyST guide, or you edit this cell to see a demonstration. Be sure to include alt text for any embedded images to make your content more accessible.\n\nNext, title your notebook appropriately with a top-level Markdown header, # (see the very first cell above). Do not use this level header anywhere else in the notebook. Our book build process will use this title in the navbar, table of contents, etc. Keep it short, keep it descriptive.\n\nFollow this with a --- cell to visually distinguish the transition to the prerequisites section.\n\n\n\n","type":"content","url":"/notebooks/ch3-txfloods","position":1},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Overview"},"type":"lvl2","url":"/notebooks/ch3-txfloods#overview","position":2},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Overview"},"content":"If you have an introductory paragraph, lead with it here! Keep it short and tied to your material, then be sure to continue into the required list of topics below,\n\nThis is a numbered list of the specific topics\n\nThese should map approximately to your main sections of content\n\nOr each second-level, ##, header in your notebook\n\nKeep the size and scope of your notebook in check\n\nAnd be sure to let the reader know up front the important concepts they’ll be leaving with\n\n","type":"content","url":"/notebooks/ch3-txfloods#overview","position":3},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/ch3-txfloods#prerequisites","position":4},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Prerequisites"},"content":"This section was inspired by \n\nthis template of the wonderful \n\nThe Turing Way Jupyter Book.\n\nFollowing your overview, tell your reader what concepts, packages, or other background information they’ll need before learning your material. Tie this explicitly with links to other pages here in Foundations or to relevant external resources. Remove this body text, then populate the Markdown table, denoted in this cell with | vertical brackets, below, and fill out the information following. In this table, lay out prerequisite concepts by explicitly linking to other Foundations material or external resources, or describe generally helpful concepts.\n\nLabel the importance of each concept explicitly as helpful/necessary.\n\nConcepts\n\nImportance\n\nNotes\n\nIntro to Cartopy\n\nNecessary\n\n\n\nUnderstanding of NetCDF\n\nHelpful\n\nFamiliarity with metadata structure\n\nProject management\n\nHelpful\n\n\n\nTime to learn: estimate in minutes. For a rough idea, use 5 mins per subsection, 10 if longer; add these up for a total. Safer to round up and overestimate.\n\nSystem requirements:\n\nPopulate with any system, version, or non-Python software requirements if necessary\n\nOtherwise use the concepts table above and the Imports section below to describe required packages as necessary\n\nIf no extra requirements, remove the System requirements point altogether\n\n\n\n","type":"content","url":"/notebooks/ch3-txfloods#prerequisites","position":5},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/ch3-txfloods#imports","position":6},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Imports"},"content":"Begin your body of content with another --- divider before continuing into this section, then remove this body text and populate the following code cell with all necessary Python imports up-front:\n\n!conda install metpy -y -c conda-forge\n\nimport ipywidgets as widgets\nimport requests\nimport s3fs\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport xarray as xr\nimport datetime\nimport numpy.ma as ma\nfrom metpy.plots import ctables\nimport urllib.request\nimport gzip\nimport tempfile\n\n","type":"content","url":"/notebooks/ch3-txfloods#imports","position":7},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"MRMS Data"},"type":"lvl2","url":"/notebooks/ch3-txfloods#mrms-data","position":8},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"MRMS Data"},"content":"\n\n# Using MRMS Data to plot the low level composite reflectivity at 12Z in Central Texas\n\n","type":"content","url":"/notebooks/ch3-txfloods#mrms-data","position":9},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"Reading in MRMS Data","lvl2":"MRMS Data"},"type":"lvl3","url":"/notebooks/ch3-txfloods#reading-in-mrms-data","position":10},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"Reading in MRMS Data","lvl2":"MRMS Data"},"content":"\n\nresponse = urllib.request.urlopen(\"https://noaa-mrms-pds.s3.amazonaws.com/CONUS/LayerCompositeReflectivity_Low_00.50/20250704/MRMS_LayerCompositeReflectivity_Low_00.50_20250704-001040.grib2.gz\")\ncompressed_file = response.read()\n\nwith tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n            f.write(gzip.decompress(compressed_file))\n            data_in = xr.load_dataarray(f.name, engine='cfgrib', decode_timedelta=True)\n\n","type":"content","url":"/notebooks/ch3-txfloods#reading-in-mrms-data","position":11},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Plotting Reflectivity over Texas at 12Z"},"type":"lvl2","url":"/notebooks/ch3-txfloods#plotting-reflectivity-over-texas-at-12z","position":12},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Plotting Reflectivity over Texas at 12Z"},"content":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nfrom metpy.plots import ctables\n\nrefl_norm, refl_cmap = ctables.registry.get_with_steps('NWSReflectivity', 5, 5)\n\n# 2. Extract coords & data\nlons = data_in.longitude.values\nlats = data_in.latitude.values\nrefl = data_in.values\n\n# If coords are 1D, make them 2D\nif lons.ndim == 1 and lats.ndim == 1:\n    lons, lats = np.meshgrid(lons, lats)\n\n# 3. Plot\nfig = plt.figure(figsize=(10, 8))\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_extent([-106, -93, 25, 36], crs=ccrs.PlateCarree())\n\nax.add_feature(cfeature.COASTLINE, linewidth=1)\nax.add_feature(cfeature.BORDERS, linewidth=1)\nax.add_feature(cfeature.STATES, linewidth=0.5)\n\nmesh = ax.pcolormesh(\n    lons, lats, ma.masked_where(refl<5,refl),\n    cmap=refl_cmap,\n    norm=refl_norm,\n    transform=ccrs.PlateCarree()\n)\n\ncb = plt.colorbar(mesh, ax=ax, orientation='horizontal', pad=0.05, aspect=50)\ncb.set_label('Reflectivity (dBZ)')\n\nplt.title('MRMS Layer Composite Reflectivity – Texas', fontsize=14)\nplt.show()\n\n\nma.masked_where(refl<5,refl)\n\n","type":"content","url":"/notebooks/ch3-txfloods#plotting-reflectivity-over-texas-at-12z","position":13},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"Animation of the Texas flood event using MRMS","lvl2":"Plotting Reflectivity over Texas at 12Z"},"type":"lvl3","url":"/notebooks/ch3-txfloods#animation-of-the-texas-flood-event-using-mrms","position":14},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"Animation of the Texas flood event using MRMS","lvl2":"Plotting Reflectivity over Texas at 12Z"},"content":"\n\n\n\n\n\n","type":"content","url":"/notebooks/ch3-txfloods#animation-of-the-texas-flood-event-using-mrms","position":15},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"A content subsection","lvl2":"Plotting Reflectivity over Texas at 12Z"},"type":"lvl3","url":"/notebooks/ch3-txfloods#a-content-subsection","position":16},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"A content subsection","lvl2":"Plotting Reflectivity over Texas at 12Z"},"content":"Divide and conquer your objectives with Markdown subsections, which will populate the helpful navbar in Jupyter Lab and here on the Jupyter Book!\n\n# some subsection code\na = [1, 2, 3, 4, 5]\n[i + 2 for i in a]\n\n","type":"content","url":"/notebooks/ch3-txfloods#a-content-subsection","position":17},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"Another content subsection","lvl2":"Plotting Reflectivity over Texas at 12Z"},"type":"lvl3","url":"/notebooks/ch3-txfloods#another-content-subsection","position":18},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"Another content subsection","lvl2":"Plotting Reflectivity over Texas at 12Z"},"content":"Keep up the good work! A note, try to avoid using code comments as narrative, and instead let them only exist as brief clarifications where necessary.\n\n","type":"content","url":"/notebooks/ch3-txfloods#another-content-subsection","position":19},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Your second content section"},"type":"lvl2","url":"/notebooks/ch3-txfloods#your-second-content-section","position":20},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Your second content section"},"content":"Here we can move on to our second objective, and we can demonstrate...\n\n","type":"content","url":"/notebooks/ch3-txfloods#your-second-content-section","position":21},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"A subsection to the second section","lvl2":"Your second content section"},"type":"lvl3","url":"/notebooks/ch3-txfloods#a-subsection-to-the-second-section","position":22},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"A subsection to the second section","lvl2":"Your second content section"},"content":"","type":"content","url":"/notebooks/ch3-txfloods#a-subsection-to-the-second-section","position":23},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl4":"a quick demonstration","lvl3":"A subsection to the second section","lvl2":"Your second content section"},"type":"lvl4","url":"/notebooks/ch3-txfloods#a-quick-demonstration","position":24},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl4":"a quick demonstration","lvl3":"A subsection to the second section","lvl2":"Your second content section"},"content":"","type":"content","url":"/notebooks/ch3-txfloods#a-quick-demonstration","position":25},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl5":"of further and further","lvl4":"a quick demonstration","lvl3":"A subsection to the second section","lvl2":"Your second content section"},"type":"lvl5","url":"/notebooks/ch3-txfloods#of-further-and-further","position":26},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl5":"of further and further","lvl4":"a quick demonstration","lvl3":"A subsection to the second section","lvl2":"Your second content section"},"content":"","type":"content","url":"/notebooks/ch3-txfloods#of-further-and-further","position":27},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl6":"header levels","lvl5":"of further and further","lvl4":"a quick demonstration","lvl3":"A subsection to the second section","lvl2":"Your second content section"},"type":"lvl6","url":"/notebooks/ch3-txfloods#header-levels","position":28},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl6":"header levels","lvl5":"of further and further","lvl4":"a quick demonstration","lvl3":"A subsection to the second section","lvl2":"Your second content section"},"content":"\n\nas well as m = a * t / h text! Similarly, you have access to other \\LaTeX equation \n\nfunctionality via MathJax:\\begin{align}\n\\dot{x} & = \\sigma(y-x) \\\\\n\\dot{y} & = \\rho x - y - xz \\\\\n\\dot{z} & = -\\beta z + xy\n\\end{align}\n\nCheck out \n\nany number of helpful Markdown resources for further customizing your notebooks and the \n\nMyST Syntax Overview for MyST-specific formatting information. Don’t hesitate to ask questions if you have problems getting it to look just right.\n\n","type":"content","url":"/notebooks/ch3-txfloods#header-levels","position":29},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Last Section"},"type":"lvl2","url":"/notebooks/ch3-txfloods#last-section","position":30},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Last Section"},"content":"You can add \n\nadmonitions using MyST syntax:\n\nNote\n\nYour relevant information here!\n\nSome other admonitions you can put in (\n\nthere are 10 total):\n\nHint\n\nA helpful hint.\n\nWarning\n\nBe careful!\n\nDanger\n\nScary stuff be here.\n\nWe also suggest checking out Jupyter Book’s \n\nbrief demonstration on adding cell tags to your cells in Jupyter Notebook, Lab, or manually. Using these cell tags can allow you to \n\ncustomize how your code content is displayed and even \n\ndemonstrate errors without altogether crashing our loyal army of machines!\n\n\n\n","type":"content","url":"/notebooks/ch3-txfloods#last-section","position":31},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/ch3-txfloods#summary","position":32},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Summary"},"content":"Add one final --- marking the end of your body of content, and then conclude with a brief single paragraph summarizing at a high level the key pieces that were learned and how they tied to your objectives. Look to reiterate what the most important takeaways were.","type":"content","url":"/notebooks/ch3-txfloods#summary","position":33},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"What’s next?","lvl2":"Summary"},"type":"lvl3","url":"/notebooks/ch3-txfloods#whats-next","position":34},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl3":"What’s next?","lvl2":"Summary"},"content":"Let Jupyter book tie this to the next (sequential) piece of content that people could move on to down below and in the sidebar. However, if this page uniquely enables your reader to tackle other nonsequential concepts throughout this book, or even external content, link to it here!\n\n","type":"content","url":"/notebooks/ch3-txfloods#whats-next","position":35},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Resources and references"},"type":"lvl2","url":"/notebooks/ch3-txfloods#resources-and-references","position":36},{"hierarchy":{"lvl1":"Project Pythia Notebook Template","lvl2":"Resources and references"},"content":"Finally, be rigorous in your citations and references as necessary. Give credit where credit is due. Also, feel free to link to relevant external material, further reading, documentation, etc. Then you’re done! Give yourself a quick review, a high five, and send us a pull request. A few final notes:\n\nKernel > Restart Kernel and Run All Cells... to confirm that your notebook will cleanly run from start to finish\n\nKernel > Restart Kernel and Clear All Outputs... before committing your notebook, our machines will do the heavy lifting\n\nTake credit! Provide author contact information if you’d like; if so, consider adding information here at the bottom of your notebook\n\nGive credit! Attribute appropriate authorship for referenced code, information, images, etc.\n\nOnly include what you’re legally allowed: no copyright infringement or plagiarism\n\nThank you for your contribution!","type":"content","url":"/notebooks/ch3-txfloods#resources-and-references","position":37},{"hierarchy":{"lvl1":"Real-time MRMS Visualization"},"type":"lvl1","url":"/notebooks/ch4-realtimedata","position":0},{"hierarchy":{"lvl1":"Real-time MRMS Visualization"},"content":"This notebook helps you visualize real-time MRMS data etc.\n\n\n\n","type":"content","url":"/notebooks/ch4-realtimedata","position":1},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Overview"},"type":"lvl2","url":"/notebooks/ch4-realtimedata#overview","position":2},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Overview"},"content":"We’ll go through the steps of:\n\nImports and formatting\n\nRegion selection\n\nProduct and tilt selection\n\nData request\n\nVisualization\n\n\n\n","type":"content","url":"/notebooks/ch4-realtimedata#overview","position":3},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Imports and formatting"},"type":"lvl2","url":"/notebooks/ch4-realtimedata#imports-and-formatting","position":4},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Imports and formatting"},"content":"\n\nHere are all required Python packages to run this code.\n\nimport s3fs\nimport urllib\nimport tempfile\nimport gzip\nimport xarray as xr\nimport ipywidgets as widgets\nimport datetime\nfrom datetime import timezone\nimport matplotlib.pyplot as plt\nimport numpy.ma as ma\nfrom metpy.plots import ctables\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport numpy as np\nimport xarray as xr\nimport hvplot.xarray \nimport numpy as np\nimport numpy.ma as ma\nfrom metpy.plots import ctables\nimport holoviews as hv\nimport matplotlib.colors as mcls\nhv.extension('bokeh')\n\n# Initialize the S3 filesystem as anonymous\naws = s3fs.S3FileSystem(anon=True)\n\n# Retrieve the current datetime in UTC\nnow = datetime.datetime.now(datetime.UTC)\ndatestring = now.strftime('%Y%m%d')\n\n","type":"content","url":"/notebooks/ch4-realtimedata#imports-and-formatting","position":5},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Region selection"},"type":"lvl2","url":"/notebooks/ch4-realtimedata#region-selection","position":6},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Region selection"},"content":"This section can easily be hardcoded (e.g. by replacing this cell with <location = “CONUS”>), but is left as a Python widget in this example to give the user flexibility to explore multiple regions.\n\n# Formatting settings for drop-down menus\nstyle = {'description_width':'120px'}\nlayout = widgets.Layout(width='325px')  \n\n# Dropdown widget to choose location from the options on AWS\nlocation_choice = widgets.Dropdown(options=[(\"ALASKA\"),(\"CARIB\"),(\"CONUS\"),(\"GUAM\"),(\"HAWAII\")], description='Region:', style=style, layout=layout)\nlocation = location_choice.value\ndisplay(location_choice)\n\n# Retrieve the user selection from 'region' \nlocation = location_choice.value\n\n","type":"content","url":"/notebooks/ch4-realtimedata#region-selection","position":7},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Data selection"},"type":"lvl2","url":"/notebooks/ch4-realtimedata#data-selection","position":8},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Data selection"},"content":"\n\nThere are numerous variables and tilts available from MRMS data. For reference, here \n\nhttps://​www​.nssl​.noaa​.gov​/projects​/mrms​/operational​/tables​.php and here \n\nhttps://​aws​.amazon​.com​/marketplace​/pp​/prodview​-6odvdc4md2jjc\n\nFor the purpose of this notebook, I provide three options: 12-hour accumulated rainfall (with integrated rain gauge measurements), a merged reflectivitiy composite, and a model-derived surface temperature. All of these variables are taken from \n\nAWS S3 and can be cross-referenced from the \n\nNSSL variable table and Chapter 1 (link to first notebook).\n\nIf you decide to use another product, you can search through \n\nall available data products on AWS and paste it in verbatim.\n\nproducts = ['LayerCompositeReflectivity_Low_00.50']\n\n","type":"content","url":"/notebooks/ch4-realtimedata#data-selection","position":9},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Data request"},"type":"lvl2","url":"/notebooks/ch4-realtimedata#data-request","position":10},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Data request"},"content":"We’ll actually pull in the data here.\n\n# Container for data and metadata\nproduct_data = {}\n\nfor product in products:\n    # Query the S3 bucket for the available files that meet the criteria\n    data_files = aws.ls(f'noaa-mrms-pds/{location}/{product}/{datestring}/', refresh=True)  \n    if not data_files:\n        continue\n\n    # Choose the last file from S3 for the most recent data\n    most_recent_file = data_files[-1]\n\n    # Check that the most recent file is within 2 hours of current time\n    timestamp_str = most_recent_file.split('_')[-1].replace('.grib2.gz', '')\n    dt = datetime.datetime.strptime(timestamp_str, \"%Y%m%d-%H%M%S\").replace(tzinfo=timezone.utc)\n    if abs((now - dt).total_seconds()) > 120 * 60:\n        continue\n\n    # Download file to memory, decompress from .gz, and read into xarray\n    try:\n        response = urllib.request.urlopen(f\"https://noaa-mrms-pds.s3.amazonaws.com/{most_recent_file[14:]}\")\n        compressed_file = response.read()\n\n        with tempfile.NamedTemporaryFile(suffix=\".grib2\") as f:\n            f.write(gzip.decompress(compressed_file))\n            f.flush()\n            data = xr.load_dataarray(f.name, engine=\"cfgrib\", decode_timedelta=True)\n    except Exception as e:\n        print(f\"Failed to process {product}: {e}\")\n        continue\n\n    # Mask invalid/missing values\n    vals = data.values\n    masked_vals = ma.masked_where(vals <= 0, vals)\n\n    # Store the data in the product_data dictionary\n    product_data[product] = {\n        'lats': data.latitude.values,\n        'lons': data.longitude.values,\n        'values': masked_vals,\n        'time': dt,\n    }\n\n    data.close()\n\n# Confirm the keys in product_data\nproduct_data.keys()\n\n","type":"content","url":"/notebooks/ch4-realtimedata#data-request","position":11},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Visualization"},"type":"lvl2","url":"/notebooks/ch4-realtimedata#visualization","position":12},{"hierarchy":{"lvl1":"Real-time MRMS Visualization","lvl2":"Visualization"},"content":"Let’s see the results\n\ndef plot_product(product):\n    # Clear previous figure\n    plt.clf()\n    \n    pdata = product_data[product]\n    lons = pdata['lons']\n    lats = pdata['lats']\n    values = pdata['values']\n    date = pdata['time']\n\n    minLon = lons.min() \n    maxLon = lons.max()\n    minLat = lats.min()\n    maxLat = lats.max()\n\n    fig = plt.figure(figsize=(12,6), facecolor='w', edgecolor='k')\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.Mercator())\n    ax.set_extent([minLon, maxLon, minLat, maxLat], crs=ccrs.Geodetic())\n    \n    # Set colors\n    if product == \"LayerCompositeReflectivity_Low_00.50\":\n        ref_norm, ref_cmap = ctables.registry.get_with_steps('NWSReflectivity', 5, 5)\n        units = \"Reflectivity (dBZ)\"\n        title = \"MRMS Merged Reflectivity\"\n    if product == \"GaugeInflIndex_12H_Pass1_00.00\":\n        ref_norm = None\n        ref_cmap = \"plasma\"\n        units = \"RhoHV\"\n        title = \"MRMS Gauge Infiltration Index\"\n    if product == \"Model_SurfaceTemp_00.50\":\n        ref_norm = None\n        ref_cmap = \"viridis\"\n        units = \"ZDR (dBZ)\"\n        title = \"MRMS Merged Differential Reflectivity\"\n        \n    # Add Boundaries\n    ax.add_feature(ccrs.cartopy.feature.STATES, linewidth=0.25)\n\n    # Plot Data\n    radarplot = ax.pcolormesh(lons, lats, values, transform=ccrs.PlateCarree(),cmap=ref_cmap,norm=ref_norm)\n    cbar = plt.colorbar(radarplot)\n    cbar.set_label(units)\n\n    plt.title(f\"{title}\", loc='left', fontweight='bold')\n    plt.title('{}'.format(date.strftime('%d %B %Y at %H:%M UTC')), loc='right')\n\n    plt.show()\n\nplot_product('LayerCompositeReflectivity_Low_00.50')\n\nCheck this out and see if it’s worth it: \n\nhttps://​hvplot​.holoviz​.org​/en​/docs​/latest​/user​_guide​/Widgets​.html\n\n# This works well but is BIG. Going to think about space requirements before committing the output.\n\"\"\"\n# Use your reflectivity product from product_data\nproduct = \"LayerCompositeReflectivity_Low_00.50\"\n\n# Get the NWS Reflectivity colormap and normalize range\nref_norm, ref_cmap = ctables.registry.get_with_steps('NWSReflectivity', 5, 5)\n\ndata = data.where(data > -50, np.nan)\n\n# Convert to hex colors for Bokeh (required by hvplot)\nfrom matplotlib.colors import Normalize\nnorm = Normalize(vmin=ref_norm.vmin, vmax=ref_norm.vmax)\nhex_cmap = [ref_cmap(norm(val)) for val in range(ref_norm.vmin, ref_norm.vmax + 5, 5)]\nhex_cmap = [mcls.to_hex(c) for c in hex_cmap]\n\n# Plot using hvplot\nreflectivity_plot = data.hvplot.image(\n    x=\"longitude\", y=\"latitude\",\n    cmap=hex_cmap,\n    colorbar=True,\n    geo=True, \n    tiles=True, \n    alpha=0.7,\n    clim=(ref_norm.vmin, ref_norm.vmax),\n    title=f\"MRMS Reflectivity - {data.time.values}\",\n    frame_width=700,\n    frame_height=500,\n    xlabel='Longitude',\n    ylabel='Latitude',\n    tools=['hover']\n)\n\nreflectivity_plot\n\"\"\"","type":"content","url":"/notebooks/ch4-realtimedata#visualization","position":13}]}